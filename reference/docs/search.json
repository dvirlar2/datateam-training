[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reference Guide",
    "section": "",
    "text": "This reference guide documents various workflows and related issues for processing data packages."
  },
  {
    "objectID": "miscellaneous.html",
    "href": "miscellaneous.html",
    "title": "NCEAS Data Team Reference Guide",
    "section": "",
    "text": "Code snippets help with templating portions of code that you will be using regularly. To add your own, go to the toolbar ribbon at the top of your Rstudio screen and select:\nTools > Global Options... > Code > Edit Snippets > Add these chunks to the end of the file\nMore info can be found in this blog post by Mara Averick on how to add them: https://maraaverick.rbind.io/2017/09/custom-snippets-in-rstudio-faster-tweet-chunks-for-all/\nUsual arcticdatautils ticket workflow ::: {.cell}\nsnippet ticket\n    library(dataone)\n    library(arcticdatautils)\n    library(EML)\n    \n    cn <- CNode('PROD')\n    adc <- getMNode(cn, 'urn:node:ARCTIC')\n    \n    rm <- \"add your rm\"\n    pkg <- get_package(adc, rm)\n    doc <- EML::read_eml(getObject(adc, pkg\\$metadata))\n    \n    doc <- eml_add_publisher(doc)\n    doc <- eml_add_entity_system(doc)\n    \n    eml_validate(doc)\n    eml_path <- \"eml.xml\"   \n    write_eml(doc, eml_path)\n\n    #update <- publish_update(adc,\n    #                                               metadata_pid = pkg\\$metadata,\n    #                                               resource_map_pid = pkg\\$resource_map,\n    #                                               metadata_path = eml_path,\n    #                                               data_pids = pkg\\$data,\n    #                                               public = F)\n                                                    \n    #datamgmt::categorize_dataset(update\\$metadata, c(\"theme1\"), \"Your Name\")\n:::\nThe datapack ticket workflow ::: {.cell}\nsnippet datapack\n    library(dataone)\n    library(datapack)\n    library(digest)\n    library(uuid)\n    library(dataone)\n    library(arcticdatautils)\n    library(EML)\n    \n    d1c <- D1Client(\"PROD\", \"urn:node:ARCTIC\")\n    packageId <- \"id here\"\n    dp <- getDataPackage(d1c, identifier=packageId, lazyLoad=TRUE, quiet=FALSE)\n    \n    #get metadata id\n    metadataId <- selectMember(dp, name=\"sysmeta@formatId\", value=\"https://eml.ecoinformatics.org/eml-2.2.0\")\n    \n    #edit the metadata\n    doc <- read_eml(getObject(d1c@mn, metadataId))\n    \n    #add the publisher info\n    doc <- eml_add_publisher(doc)\n    doc <- eml_add_entity_system(doc)\n    \n    doc\\$dataset\\$project <- eml_nsf_to_project(\"nsf id here\")\n    \n    #check and save the metadata\n    eml_validate(doc)\n    eml_path <- arcticdatautils::title_to_file_name(doc\\$dataset\\$title)\n    write_eml(doc, eml_path)\n    \n    dp <- replaceMember(dp, metadataId, replacement=eml_path)\n    \n    #upload the dataset\n    myAccessRules <- data.frame(subject=\"CN=arctic-data-admins,DC=dataone,DC=org\", permission=\"changePermission\") \n    packageId <- uploadDataPackage(d1c, dp, public=F, accessRules=myAccessRules, quiet=FALSE)\n    #datamgmt::categorize_dataset(\"doi\", c(\"theme1\"), \"Jasmine\")\n:::\nQuick way to give access to submitters to their datasets: ::: {.cell}\nsnippet access\n    library(dataone)\n    library(arcticdatautils)\n    library(EML)\n\n    cn <- CNode('PROD')\n    adc <- getMNode(cn, 'urn:node:ARCTIC')\n\n    rm <- \"rm here\"\n    pkg <- get_package(adc, rm)\n\n    set_access(adc, unlist(pkg), \"orcid here\")\n:::\nQuick access to the usual code for common Solr queries: ::: {.cell}\nsnippet solr\n    library(dataone)\n    library(arcticdatautils)\n    library(EML)\n\n    cn <- CNode('PROD')\n    adc <- getMNode(cn, 'urn:node:ARCTIC')\n    \n    result <- query(adc, list(q = \"rightsHolder:*orcid.org/0000-000X-XXXX-XXXX* AND (*:* NOT obsoletedBy:*)\",\n                              fl = \"identifier,rightsHolder,formatId, fileName, dateUploaded\",\n                              sort = 'dateUploaded+desc',\n                              start =\"0\",\n                              rows = \"1500\"),\n                         as=\"data.frame\")\n:::\n\n\n\nThis section contains some basic tips about file paths.\n\n\nIf you’re working on the datateam server (RStudio in an internet browser), you’re usually working in the home directory under your username. File paths generally follow this pattern: /home/dmullen/folder/file. Note: These files are not stored on your local machine, they are on a remote server. You can access them through remote SFTP software like Cyberduck.\nIf you’re working with your local RStudio app then your file paths generally follow this pattern: /Users/datateam/folder/file. These files are stored on your local machine and you can access them with Finder.\n\n\n\nUsing . in a file path refers to your current working directory. You can print your working directory with the call: getwd(). If we assume that my current working directory is home/dmullen, then the following two calls are equivalent:\n\nfile.exists('/home/dmullen/myFile.R')\nfile.exists('./myFile.R')\n\nUsing ~ in a file path does not always refer to your current working directory. This is a common misconception. It is actually set to the global R USER path. You can print this with the call: Sys.getenv('USER'). Let’s assume that I’m working on the arcticdatautils package which I open using a .RProj file. This will update my current working directory to: /home/dmullen/arcticdatautils. Now the following calls are equivalent:\n\nfile.exists('/home/dmullen/arcticdatautils/myFile.R')\nfile.exists('~/arcticdatautils/myFile.R')\nfile.exists('./myFile.R')\n\n\n\n\n\nCheck which version of metacat is currently deployed to - arcticdata.io here,\n- and to test.arcticdata.io here.\n\n\n\n\n\nThe following online books are useful for expanding your R knowledge and skills:\n\nthe most recent ADC training materials\n\nThe cleaning and data manipulation section is useful for working with attribute tables\n\nEfficient R Programming\n\nIn particular Chapter 3 Efficient Programming\n\nR for Data Science\n\nSection on Strings\n\nR Packages\n\ncontributing to arcticdatatutils, datamgmt and EML\n\nAdvanced R\n\nObject-oriented programming in R for S4 to understand how datapack and dataone packages are written\n\nbookdown: Authoring Books and Technical Documents with R Markdown\nformatting, troubleshooting and updating the training document\n\nOthers\n\nHands-On Programming with R\nR Programming for Data Science\nExploratory Data Analysis with R\nMastering Software Development in R\nGeocomputation with R\nR Markdown: The Definitive Guide\nThe Tidyverse Style Guide\n\nThe RStudio cheatsheets are also useful references for functions in tidyverse and other packages.\n\n\n\nThe data team uses and develops a number of R packages. Here is a listing and description of the main packages:\n\ndataone\n\nreading and writing data at DataONE member nodes\nhttp://doi.org/10.5063/F1M61H5X\n\ndatapack\n\ncreating and managing data packages\nhttps://github.com/ropensci/datapack\n\nEML\n\ncreating and editing EML metadata documents\nhttps://ropensci.github.io/EML\n\narcticdatautils\n\nutility functions for processing data for the Arctic Data Center\nhttps://nceas.github.io/arcticdatautils/\n\ndatamgmt\n\ndata management utilities for curating, documenting, and publishing data (sandbox package)\nhttps://nceas.github.io/datamgmt/\n\nmetadig\n\nauthoring MetaDIG quality checks\nhttps://github.com/NCEAS/metadig-r\n\nmetajam\n\ndownloading and reading data and metadata from DataONE member nodes\nhttps://nceas.github.io/metajam/"
  },
  {
    "objectID": "miscellaneous.html#file-paths-1",
    "href": "miscellaneous.html#file-paths-1",
    "title": "1  Miscellaneous",
    "section": "1.4 File paths",
    "text": "1.4 File paths\nThis section contains some basic tips about file paths.\n\n1.4.1 Remote files vs. local files\nIf you’re working on the datateam server (RStudio in an internet browser), you’re usually working in the home directory under your username. File paths generally follow this pattern: /home/dmullen/folder/file. Note: These files are not stored on your local machine, they are on a remote server. You can access them through remote SFTP software like Cyberduck.\nIf you’re working with your local RStudio app then your file paths generally follow this pattern: /Users/datateam/folder/file. These files are stored on your local machine and you can access them with Finder.\n\n\n1.4.2 File path shortcuts\nUsing . in a file path refers to your current working directory. You can print your working directory with the call: getwd(). If we assume that my current working directory is home/dmullen, then the following two calls are equivalent:\n\nfile.exists('/home/dmullen/myFile.R')\nfile.exists('./myFile.R')\n\nUsing ~ in a file path does not always refer to your current working directory. This is a common misconception. It is actually set to the global R USER path. You can print this with the call: Sys.getenv('USER'). Let’s assume that I’m working on the arcticdatautils package which I open using a .RProj file. This will update my current working directory to: /home/dmullen/arcticdatautils. Now the following calls are equivalent:\n\nfile.exists('/home/dmullen/arcticdatautils/myFile.R')\nfile.exists('~/arcticdatautils/myFile.R')\nfile.exists('./myFile.R')"
  },
  {
    "objectID": "miscellaneous.html#metacat-version-1",
    "href": "miscellaneous.html#metacat-version-1",
    "title": "1  Miscellaneous",
    "section": "1.6 Metacat version",
    "text": "1.6 Metacat version\nCheck which version of metacat is currently deployed to - arcticdata.io here,\n- and to test.arcticdata.io here."
  },
  {
    "objectID": "miscellaneous.html#resources-for-r-1",
    "href": "miscellaneous.html#resources-for-r-1",
    "title": "1  Miscellaneous",
    "section": "1.8 Resources for R",
    "text": "1.8 Resources for R\n\n1.8.1 Learning\nThe following online books are useful for expanding your R knowledge and skills:\n\nthe most recent ADC training materials\n\nThe cleaning and data manipulation section is useful for working with attribute tables\n\nEfficient R Programming\n\nIn particular Chapter 3 Efficient Programming\n\nR for Data Science\n\nSection on Strings\n\nR Packages\n\ncontributing to arcticdatatutils, datamgmt and EML\n\nAdvanced R\n\nObject-oriented programming in R for S4 to understand how datapack and dataone packages are written\n\nbookdown: Authoring Books and Technical Documents with R Markdown\nformatting, troubleshooting and updating the training document\n\nOthers\n\nHands-On Programming with R\nR Programming for Data Science\nExploratory Data Analysis with R\nMastering Software Development in R\nGeocomputation with R\nR Markdown: The Definitive Guide\nThe Tidyverse Style Guide\n\nThe RStudio cheatsheets are also useful references for functions in tidyverse and other packages.\n\n\n1.8.2 Packages\nThe data team uses and develops a number of R packages. Here is a listing and description of the main packages:\n\ndataone\n\nreading and writing data at DataONE member nodes\nhttp://doi.org/10.5063/F1M61H5X\n\ndatapack\n\ncreating and managing data packages\nhttps://github.com/ropensci/datapack\n\nEML\n\ncreating and editing EML metadata documents\nhttps://ropensci.github.io/EML\n\narcticdatautils\n\nutility functions for processing data for the Arctic Data Center\nhttps://nceas.github.io/arcticdatautils/\n\ndatamgmt\n\ndata management utilities for curating, documenting, and publishing data (sandbox package)\nhttps://nceas.github.io/datamgmt/\n\nmetadig\n\nauthoring MetaDIG quality checks\nhttps://github.com/NCEAS/metadig-r\n\nmetajam\n\ndownloading and reading data and metadata from DataONE member nodes\nhttps://nceas.github.io/metajam/"
  },
  {
    "objectID": "miscellaneous.html#code-snippets-1",
    "href": "miscellaneous.html#code-snippets-1",
    "title": "1  Miscellaneous",
    "section": "1.2 Code Snippets",
    "text": "1.2 Code Snippets\nCode snippets help with templating portions of code that you will be using regularly. To add your own, go to the toolbar ribbon at the top of your Rstudio screen and select:\nTools > Global Options... > Code > Edit Snippets > Add these chunks to the end of the file\nMore info can be found in this blog post by Mara Averick on how to add them: https://maraaverick.rbind.io/2017/09/custom-snippets-in-rstudio-faster-tweet-chunks-for-all/\nUsual arcticdatautils ticket workflow ::: {.cell}\nsnippet ticket\n    library(dataone)\n    library(arcticdatautils)\n    library(EML)\n    \n    cn <- CNode('PROD')\n    adc <- getMNode(cn, 'urn:node:ARCTIC')\n    \n    rm <- \"add your rm\"\n    pkg <- get_package(adc, rm)\n    doc <- EML::read_eml(getObject(adc, pkg\\$metadata))\n    \n    doc <- eml_add_publisher(doc)\n    doc <- eml_add_entity_system(doc)\n    \n    eml_validate(doc)\n    eml_path <- \"eml.xml\"   \n    write_eml(doc, eml_path)\n\n    #update <- publish_update(adc,\n    #                                               metadata_pid = pkg\\$metadata,\n    #                                               resource_map_pid = pkg\\$resource_map,\n    #                                               metadata_path = eml_path,\n    #                                               data_pids = pkg\\$data,\n    #                                               public = F)\n                                                    \n    #datamgmt::categorize_dataset(update\\$metadata, c(\"theme1\"), \"Your Name\")\n:::\nThe datapack ticket workflow ::: {.cell}\nsnippet datapack\n    library(dataone)\n    library(datapack)\n    library(digest)\n    library(uuid)\n    library(dataone)\n    library(arcticdatautils)\n    library(EML)\n    \n    d1c <- D1Client(\"PROD\", \"urn:node:ARCTIC\")\n    packageId <- \"id here\"\n    dp <- getDataPackage(d1c, identifier=packageId, lazyLoad=TRUE, quiet=FALSE)\n    \n    #get metadata id\n    metadataId <- selectMember(dp, name=\"sysmeta@formatId\", value=\"https://eml.ecoinformatics.org/eml-2.2.0\")\n    \n    #edit the metadata\n    doc <- read_eml(getObject(d1c@mn, metadataId))\n    \n    #add the publisher info\n    doc <- eml_add_publisher(doc)\n    doc <- eml_add_entity_system(doc)\n    \n    doc\\$dataset\\$project <- eml_nsf_to_project(\"nsf id here\")\n    \n    #check and save the metadata\n    eml_validate(doc)\n    eml_path <- arcticdatautils::title_to_file_name(doc\\$dataset\\$title)\n    write_eml(doc, eml_path)\n    \n    dp <- replaceMember(dp, metadataId, replacement=eml_path)\n    \n    #upload the dataset\n    myAccessRules <- data.frame(subject=\"CN=arctic-data-admins,DC=dataone,DC=org\", permission=\"changePermission\") \n    packageId <- uploadDataPackage(d1c, dp, public=F, accessRules=myAccessRules, quiet=FALSE)\n    #datamgmt::categorize_dataset(\"doi\", c(\"theme1\"), \"Jasmine\")\n:::\nQuick way to give access to submitters to their datasets: ::: {.cell}\nsnippet access\n    library(dataone)\n    library(arcticdatautils)\n    library(EML)\n\n    cn <- CNode('PROD')\n    adc <- getMNode(cn, 'urn:node:ARCTIC')\n\n    rm <- \"rm here\"\n    pkg <- get_package(adc, rm)\n\n    set_access(adc, unlist(pkg), \"orcid here\")\n:::\nQuick access to the usual code for common Solr queries: ::: {.cell}\nsnippet solr\n    library(dataone)\n    library(arcticdatautils)\n    library(EML)\n\n    cn <- CNode('PROD')\n    adc <- getMNode(cn, 'urn:node:ARCTIC')\n    \n    result <- query(adc, list(q = \"rightsHolder:*orcid.org/0000-000X-XXXX-XXXX* AND (*:* NOT obsoletedBy:*)\",\n                              fl = \"identifier,rightsHolder,formatId, fileName, dateUploaded\",\n                              sort = 'dateUploaded+desc',\n                              start =\"0\",\n                              rows = \"1500\"),\n                         as=\"data.frame\")\n:::"
  },
  {
    "objectID": "miscellaneous.html#file-paths",
    "href": "miscellaneous.html#file-paths",
    "title": "1  Miscellaneous",
    "section": "1.2 File paths",
    "text": "1.2 File paths\nThis section contains some basic tips about file paths.\n\n1.2.1 Remote files vs. local files\nIf you’re working on the datateam server (RStudio in an internet browser), you’re usually working in the home directory under your username. File paths generally follow this pattern: /home/dmullen/folder/file. Note: These files are not stored on your local machine, they are on a remote server. You can access them through remote SFTP software like Cyberduck.\nIf you’re working with your local RStudio app then your file paths generally follow this pattern: /Users/datateam/folder/file. These files are stored on your local machine and you can access them with Finder.\n\n\n1.2.2 File path shortcuts\nUsing . in a file path refers to your current working directory. You can print your working directory with the call: getwd(). If we assume that my current working directory is home/dmullen, then the following two calls are equivalent:\n\nfile.exists('/home/dmullen/myFile.R')\nfile.exists('./myFile.R')\n\nUsing ~ in a file path does not always refer to your current working directory. This is a common misconception. It is actually set to the global R USER path. You can print this with the call: Sys.getenv('USER'). Let’s assume that I’m working on the arcticdatautils package which I open using a .RProj file. This will update my current working directory to: /home/dmullen/arcticdatautils. Now the following calls are equivalent:\n\nfile.exists('/home/dmullen/arcticdatautils/myFile.R')\nfile.exists('~/arcticdatautils/myFile.R')\nfile.exists('./myFile.R')"
  },
  {
    "objectID": "miscellaneous.html#metacat-version",
    "href": "miscellaneous.html#metacat-version",
    "title": "1  Miscellaneous",
    "section": "1.3 Metacat version",
    "text": "1.3 Metacat version\nCheck which version of metacat is currently deployed to - arcticdata.io here,\n- and to test.arcticdata.io here."
  },
  {
    "objectID": "miscellaneous.html#resources-for-r",
    "href": "miscellaneous.html#resources-for-r",
    "title": "1  Miscellaneous",
    "section": "1.4 Resources for R",
    "text": "1.4 Resources for R\n\n1.4.1 Learning\nThe following online books are useful for expanding your R knowledge and skills:\n\nthe most recent ADC training materials\n\nThe cleaning and data manipulation section is useful for working with attribute tables\n\nEfficient R Programming\n\nIn particular Chapter 3 Efficient Programming\n\nR for Data Science\n\nSection on Strings\n\nR Packages\n\ncontributing to arcticdatatutils, datamgmt and EML\n\nAdvanced R\n\nObject-oriented programming in R for S4 to understand how datapack and dataone packages are written\n\nbookdown: Authoring Books and Technical Documents with R Markdown\nformatting, troubleshooting and updating the training document\n\nOthers\n\nHands-On Programming with R\nR Programming for Data Science\nExploratory Data Analysis with R\nMastering Software Development in R\nGeocomputation with R\nR Markdown: The Definitive Guide\nThe Tidyverse Style Guide\n\nThe RStudio cheatsheets are also useful references for functions in tidyverse and other packages.\n\n\n1.4.2 Packages\nThe data team uses and develops a number of R packages. Here is a listing and description of the main packages:\n\ndataone\n\nreading and writing data at DataONE member nodes\nhttp://doi.org/10.5063/F1M61H5X\n\ndatapack\n\ncreating and managing data packages\nhttps://github.com/ropensci/datapack\n\nEML\n\ncreating and editing EML metadata documents\nhttps://ropensci.github.io/EML\n\narcticdatautils\n\nutility functions for processing data for the Arctic Data Center\nhttps://nceas.github.io/arcticdatautils/\n\ndatamgmt\n\ndata management utilities for curating, documenting, and publishing data (sandbox package)\nhttps://nceas.github.io/datamgmt/\n\nmetadig\n\nauthoring MetaDIG quality checks\nhttps://github.com/NCEAS/metadig-r\n\nmetajam\n\ndownloading and reading data and metadata from DataONE member nodes\nhttps://nceas.github.io/metajam/"
  },
  {
    "objectID": "wrangle_data.html",
    "href": "wrangle_data.html",
    "title": "Wrangle Data",
    "section": "",
    "text": "You might have read that column names should not include spaces or special characters. Inevitably, you’ll encounter data that are not so tidy. For example:\n\n\n  First Name Last Name date of birth\n1      Homer   Simpson      1/1/1960\n2      Marge   Simpson    10/20/1965\n3        Ned  Flanders     3/22/1961\n\n\nTo tidy it up, you can use the clean_names() function from the janitor package:\n\njanitor::clean_names(df)"
  },
  {
    "objectID": "wrangle_data.html#fix-excel-dates",
    "href": "wrangle_data.html#fix-excel-dates",
    "title": "Wrangle Data",
    "section": "Fix Excel dates",
    "text": "Fix Excel dates\nDo you see something that looks like 43134, 43135, 43136 even though the column header is Dates? You may have encountered an Excel date/time problem. To fix it, the janitor package has a handy function:\n\njanitor::excel_numeric_to_date(c(43134, 43135, 43136))\n\n\n\n\n\n\n\nWarning\n\n\n\nMake sure you check that the dates make sense!"
  },
  {
    "objectID": "edit_data_packages.html",
    "href": "edit_data_packages.html",
    "title": "Edit Data Packages",
    "section": "",
    "text": "adapted from the dataone and datapack vingettes\ndatapack is written differently than most R packages you may have encountered in the past. This is because it uses the S4 system instead.\n\nlibrary(dataone)\nlibrary(datapack)\nlibrary(uuid)\n\nData packages\nData packages are a class that has slots for relations (provenance), objects(the metadata and data file(s)) and systemMetadata.\n\n\nNodes\nUsing this example on arcticdata.io\n\nd1c_test <- dataone::D1Client(\"STAGING\", \"urn:node:mnTestARCTIC\")\n\nTo use the member node information, use the mn slot\n\nd1c_test@mn\n\n\n\n\n\n\n\nNote\n\n\n\nTo access the various slots using objects created by datapack and dataone (e.g. getSystemMetadata) requires the @ which is different from what you might have seen in the past. This is because these use the S4 system.\n\n\nGet an existing package from the Arctic Data Center. Make sure you know as you go through this training whether you are reading or writing to test or production. We don’t want to upload any of your test datasets to production!\n\nd1c <- dataone::D1Client(\"PROD\", \"urn:node:ARCTIC\")\ndp <- dataone::getDataPackage(d1c, \"resource_map_urn:uuid:1f9eee7e-2d03-43c4-ad7f-f300e013ab28\")\n\n\n\n\nCheck out the objects slot\n\ndp@objects\n\nGet the number for data and metadata files associated with this data package:\n\ngetSize(dp)\n\nGet the file names and corresponding pids\n\ngetValue(dp, name=\"sysmeta@fileName\")\n\nGet identifiers\nYou can search by any of the sysmeta slots such as fileName and formatId and get the corresponding identifier(s):\n\nmetadataId <- selectMember(dp, name=\"sysmeta@ADD THE NAME OF THE SLOT\", \n                           value=\"PATTERN TO SEARCH BY\")\n\nExample:\n\nselectMember(dp, name=\"sysmeta@formatId\", value=\"image/tiff\")\nselectMember(dp, name=\"sysmeta@fileName\", value=\"filename.csv\")\n\n\n\n\nView the provenance as a dataTable. We will get into detail in the Building provenance chapter.\n\ndp@relations$relations"
  },
  {
    "objectID": "edit_data_packages.html#create-a-new-data-package",
    "href": "edit_data_packages.html#create-a-new-data-package",
    "title": "Edit Data Packages",
    "section": "Create a new data package",
    "text": "Create a new data package\nadapted from the dataone and datapack vingettes\n\nlibrary(dataone)\nlibrary(datapack)\nlibrary(uuid)\n\nTo create a new data package, follow the code below. Remember, a data package is a class that has slots for relations (provenance), objects(the metadata and data file(s)) and systemMetadata.\n\ndp <- new(\"DataPackage\")\n\n\nUpload new data files\n\nCreate and add a metadata file\nIn this example we will use this previously written EML metadata. Here we are getting the file path from the dataone package and saving that as the object emlFile.\nThis is a bit of an unusual way to reference a local file path, but all this does is looks within the R package dataone and grabs the path to a metadata document stored within that package. If you print the value of emlFile you’ll see it is just a file path, but it points to a special place on the server where that package is installed. Usually you will just reference EML paths that are stored within your user file system.\n\nemlFile <- system.file(\"extdata/strix-pacific-northwest.xml\", \n                       package = \"dataone\")\n\nCreate a new DataObject and add it to the package. In the case below, our new DataObject will be a metadata file.\n\nmetadataObj <- new(\"DataObject\", \n                   format = \"https://eml.ecoinformatics.org/eml-2.2.0\", \n                   filename = emlFile)\n\ndp <- addMember(dp, metadataObj)\n\nCheck the dp object to see if the DataObject was added correctly.\n\ndp\n\n\n\nAdd some additional data files\n\nsourceData <- system.file(\"extdata/OwlNightj.csv\", package = \"dataone\")\n\nsourceObj <- new(\"DataObject\", format = \"text/csv\", filename = sourceData)\n\ndp <- addMember(dp, sourceObj, metadataObj)\n\n\n\n\n\n\n\nNote\n\n\n\nIf you want to change the formatId please use updateSystemMetadata (more on this later in the book)\n\n\n\n\n\nUpload the package\n\nd1c <- dataone::D1Client(\"STAGING\", \"urn:node:mnTestARCTIC\")\n\nMake sure to give access privileges to the ADC admins. Although you may be tempted to edit the format of the string in the subject argument, you must keep it exactly as is. Otherwise you’ll run into error messages!\n\nmyAccessRules <- data.frame(subject = \"CN=arctic-data-admins,DC=dataone,DC=org\", \n                            permission = \"changePermission\") \n\nGet necessary token from test.arcticdata.io to upload the dataset prior uploading the datapackage:\n\npackageId <- uploadDataPackage(d1c, dp, public = TRUE, \n                               accessRules = myAccessRules, quiet = FALSE)\n\n\n\n\n\n\n\nNote\n\n\n\nIf you want to preserve folder structures, you can use this method\nIn this example, adding the csv files to a folder named data and scripts:\n\noutputData <- system.file(\"extdata/Strix-occidentalis-obs.csv\", package=\"dataone\") \n\noutputObj <- new(\"DataObject\", format = \"text/csv\", filename = outputData,\n                 targetPath = \"data\")\n\ndp <- addMember(dp, outputObj, metadataObj)\n\nprogFile <- system.file(\"extdata/filterObs.R\", package = \"dataone\")\n\nprogObj <- new(\"DataObject\", format = \"application/R\", filename = progFile, \n               targetPath = \"scripts\", mediaType = \"text/x-rsrc\")\n\ndp <- addMember(dp, progObj, metadataObj)"
  },
  {
    "objectID": "edit_data_packages.html#update-packages-with-datapack",
    "href": "edit_data_packages.html#update-packages-with-datapack",
    "title": "Edit Data Packages",
    "section": "Update packages with datapack",
    "text": "Update packages with datapack\nOnce you have updated the data objects and saved the metadata to a file, we can update the metadata and add the new pid to the resource map using datapack::updateDataObject().\n\n\n\n\n\n\nNote\n\n\n\nThis part of the training assumes that you have an EML file created from earlier parts of the training\n\n\n\n\n\n\n\n\nWarning\n\n\n\nYou must use these R packages for data packages that have provenance or folder hierarchy (arcticdatatutils does not support those features)\n\n\n\nGet the package\nSetting the node is done slightly differently: ::: {.cell}\nd1c_test <- dataone::D1Client(\"STAGING\", \"urn:node:mnTestARCTIC\")\n:::\nGet a pre-existing package: ::: {.cell}\npackageId <- \"the resource map\"\n\ndp <- getDataPackage(d1c_test, identifier=packageId, lazyLoad=TRUE, quiet=FALSE)\n:::\n\n\nUpdate the metadata\nGet the metadata identifier ::: {.cell}\nmetadataId <- selectMember(dp, name=\"sysmeta@formatId\", value=\"https://eml.ecoinformatics.org/eml-2.2.0\")\n:::\n\n\n\n\n\n\nNote\n\n\n\nTake note of the EML version. If it is EML 2.1.1 the value needs to be changed to -\"eml://ecoinformatics.org/eml-2.1.1\"\n\n\nRead the EML doc ::: {.cell}\ndoc <- read_eml(getObject(d1c@mn, metadataId))\n:::\nEdit the EML as usual - see the documents in Edit EML for details\nOnce you are happy with your changes, you can update your data package to include the new metadata file using replaceMember ::: {.cell}\neml_path <- \"path/to/your/saved/eml.xml\"\nwrite_eml(doc, eml_path)\n\ndp <- replaceMember(dp, metadataId, replacement=eml_path)\n:::\n\n\nModify the data files\nremove zip files ::: {.cell}\nzipId <- selectMember(dp, name=\"sysmeta@formatId\", value=\"application/vnd.shp+zip\")\nremoveMember(dp, zipId, removeRelationships = T)\n:::\nadd an existing data object\n\ndataObj <- getDataObject(d1c_test, id=\"urn:uuid: here\", lazyLoad=T, limit=\"1TB\")\ndp <- addMember(dp, dataObj, mo=metadataId)\n\n\n\n\n\n\n\nNote\n\n\n\nIf you want to change the formatId please use updateSystemMetadata\n\n\n\n\nPublish update\n\nUsing a DOI\nIf you want to publish with a DOI (Digital Object Identifier) instead of a UUID (Universally Unique Identifier), (a) you need to change the public argument to TRUE and generate a DOI identifier.\nThis should only be done after the package is finalized and has been thoroughly reviewed!\n\nUpdating a package with a new DOI:\n\nA Digital Object Identifier (DOI) may be assigned to the metadata DataObject, using the generateIdentifier: ::: {.cell}\ndoi <- dataone::generateIdentifier(d1c_test@mn, \"DOI\")\ndp <- replaceMember(dp, metadataId, replacement=eml_path, newId=doi)\n\nnewPackageId <- uploadDataPackage(d1c_test, dp, public=TRUE, quiet=FALSE)\n:::\n\nUpdating a package with a pre-issued DOI ::: {.cell}\n\ndp <- replaceMember(dp, metadataId, replacement=eml_path, newId=\"your pre-issued doi previously generated\")\n\nnewPackageId <- uploadDataPackage(d1c_test, dp, public=TRUE, quiet=FALSE)\n:::\nRefresh the landing page at test.arcticdata.io/#view/… for this package and then follow the “newer version” link to view the latest."
  },
  {
    "objectID": "edit_data_packages.html#add-a-pre-generated-identifier-to-the-eml",
    "href": "edit_data_packages.html#add-a-pre-generated-identifier-to-the-eml",
    "title": "Edit Data Packages",
    "section": "Add a pre-generated identifier to the EML",
    "text": "Add a pre-generated identifier to the EML\nWhen you pre-generate a UUID or DOI, the change is not automatically reflected in the packageId section of the EML. Use the code below to ensure that the EML lines up with the desired identifier:\n\n## Generate DOI and add to EML\n# Note that you cannot generate a DOI on test nodes\ndoiPid <- generateIdentifier(mn, \"DOI\")\ndoc$packageId <- doiPid\n\nBe sure to include the identifier= argument in your publish update command so the pre-generated identifier is applied."
  },
  {
    "objectID": "edit_data_packages.html#edit-sysmeta",
    "href": "edit_data_packages.html#edit-sysmeta",
    "title": "Edit Data Packages",
    "section": "Edit sysmeta",
    "text": "Edit sysmeta\nTo edit the sysmeta of an object (data file, EML, or resource map, etc.) with a PID, first load the sysmeta into R using the following command:\n\nsysmeta <- getSystemMetadata(d1c@mn, pid)\n\nThen edit the sysmeta slots by using @ functionality. For example, to change the fileName use the following command:\n\nsysmeta@fileName <- 'NewFileName.csv'\n\nNote that some slots cannot be changed by simple text replace (particularly the accessPolicy). There are various helper functions for changing the accessPolicy and rightsHolder such as datapack::addAccessRule() (which takes the sysmeta as an input) or arcticdatautils::set_rights_and_access(), which only requires a PID. In general, you most frequently need to use dataone::getSystemMetadata() to change either the formatId or fileName slots (see the DataONE list of format ids) for acceptable formats.\n\n# Example of setting the formatId slot\nsysmeta@formatId <- \"eml://ecoinformatics.org/eml-2.1.1\"\n\nAfter you have changed the necessary slot, you can update the system metadata using the following command:\n\nupdateSystemMetadata(d1c@mn, pid, sysmeta)\n\n\nIdentifiers and sysmeta\nImportantly, changing the system metadata does NOT necessitate a change in the PID of an object. This is because changes to the system metadata do not change the object itself, they are only changing the description of the object (although ideally the system metadata are accurate when an object is first published).\n\n\nAdditional resources\nFor a more in-depth (and technical) guide to sysmeta, check out the DataONE documentation:\n\nSystem Metadata\nData Types in CICore"
  },
  {
    "objectID": "edit_data_packages.html#obsolescence-chain",
    "href": "edit_data_packages.html#obsolescence-chain",
    "title": "Edit Data Packages",
    "section": "Obsolescence chain",
    "text": "Obsolescence chain\nYou can obsolete a dataset using the function datamgmt::obsolete_package(). Use the documentation for instructions on using the function. The following workflow explains how the functions operate.\nThis chunk is to obsolete one data set. If there are more to add to the chain, more steps can be added. Be very careful. Make sure to fill in obsoletes and obsoletedBy slots for each one. The obsoletes and obsoletedBy fields must be NA, once they are populated they can’t be modified.\n\n# get oldest version of the file you want to be visible. Use get_all_versions and look at the latest.\n# urn:uuid:...\n\n# PID for data set to be obsoleted (hidden): doi:10…\n\n# adding data set to obsolete (hide) in the slot before the first version of the visible data set\nsysmeta1 <- getSystemMetadata(mn, \"urn:uuid:example_pid\")\nsysmeta1@obsoletes <- \"doi:10.example_doi\"\nupdateSystemMetadata(mn, \"urn:uuid:example_pid\", sysmeta1)\n\n# adding first version to obsolescence chain after obsoleted (hidden) version\nsysmeta0 <- getSystemMetadata(mn, \"doi:10.example_doi\")\nsysmeta0@obsoletedBy <- \"urn:uuid:example_pid\"\nupdateSystemMetadata(mn, \"doi:10.example_doi\", sysmeta0)\n\nThe following code is equivalent to the code chunk above. This method is recommended, however it is necessary to read the function documentation first.\n\ndatamgmt::obsolete_package(mn, metadata_obsolete = \"doi:10.example_doi\", \n                           metadata_new = \"urn:uuid:example_pid\")"
  },
  {
    "objectID": "edit_data_packages.html#set-dataone-nodes",
    "href": "edit_data_packages.html#set-dataone-nodes",
    "title": "Edit Data Packages",
    "section": "Set DataONE nodes",
    "text": "Set DataONE nodes\nDataONE is a network of data repositories that is structured with coordinating nodes (CN) and member nodes (MN). The network tree looks something like this:\n\nAt the top level is DataONE itself. Within DataONE there are several coordinating nodes, including nodes for both production material and testing material. Within these coordinating nodes are many member nodes, including ones for both the Arctic Data Center and the KNB. To set the environment in which you want to publish data, you need to set both the coordinating node and the member node. For example, if you are publishing to the Arctic Data Center test site, you would want to set the coordinating node to STAGING and the member node to mnTestArctic.\n\n\n\n\n\n\nWarning\n\n\n\nA note on nodes - be very careful about what you publish on production nodes (PROD, or arcticdata.io). These nodes should NEVER be used to publish test or training data sets.\n\n\nThe primary nodes we work on, and how to set them in R, are below:\n\nStaging (Test) nodes\n\n# ADC (test.arcticdata.io)\ncn_staging <- CNode('STAGING')\nadc_test <- getMNode(cn_staging,'urn:node:mnTestARCTIC')\n\n# KNB (dev.nceas.ucsb.edu)\ncn_staging2 <- CNode(\"STAGING2\")\nknb_test <- getMNode(cn_staging2, \"urn:node:mnTestKNB\")\n\n\n\nProduction nodes\n\n# ADC (arcticdata.io)\ncn <- CNode('PROD')\nadc <- getMNode(cn,'urn:node:ARCTIC')\n\n# KNB (knb.ecoinformatics.org)\nknb <- getMNode(cn, \"urn:node:KNB\")\n\n# GOA \ngoa <- getMNode(cn, \"urn:node:GOA\")\n\n# You can also use the datamgmt::guess_membernode function to set a member node\n# Note: this pid looks like a URL - it's really a unique identifier\ndryad <- datamgmt::guess_member_node('https://doi.org/10.5061/dryad.k6gf1tf/15?ver=2018-09-18T03:54:10.492+00:00')\n\nMore DataONE STAGING nodes can be found here More DataONE PROD nodes can be found here"
  },
  {
    "objectID": "edit_data_packages.html#set-rights-and-access",
    "href": "edit_data_packages.html#set-rights-and-access",
    "title": "Edit Data Packages",
    "section": "Set rights and access",
    "text": "Set rights and access\nOne final step when creating/updating packages is to make sure that the rights and access on all the objects that were uploaded are set correctly within the sysmeta. The function arcticdatautils::set_rights_and_access() will set both, and arcticdatautils::set_access() will just set access. There are two functions for this because a rightsHolder should always have access, but not all people who need access are rightsHolders. The rightsHolder of the data package is typically the submitter (if the data set is submitted through the web form (“editor”)), but if a data team member is publishing objects for a PI, the rightsHolder should be the main point of contact for the data set (i.e. the person who requested that we upload the data for them).\nTo set the rights and access for all of the objects in a package, first get the ORCiD of the person to whom you are giving rights and access. You can set this manually, or grab it from one of the creators in an EML file. You can look up ORCID iDs here\n\n# Manually set ORCiD\n subject <- 'http://orcid.org/PUT-YOUR-ORCD-HERE'\n\n# Set ORCiD from EML creator\n# if only 1 creator exists\n subject <- doc$dataset$creator$userId$userId\n # if more than 1 creator exists and you want the first one\n subject <- doc$dataset$creator[[1]]$userId$userId\n \n # As a convention we use `http:` instead of `https:` in our system metadata\n subject <- sub(\"^https://\", \"http://\", subject)\n\nNote, when setting metadata, the ORCiD must start with http://. ORCiDs in EML should start with https://. The sub() command above will change this formatting for you.\nNext, set the rights and access using the following command:\n\nset_rights_and_access(mn, \n                      pids = c(pkg$metadata, pkg$data, pkg$resource_map),\n                      subject = subject,\n                      permissions = c('read','write','changePermission'))\n\nIf you ever need to remove/add public access to your package or object, you can use remove_public_read() or set_public_read(), respectively.\n\nremove_public_read(mn, c(pkg$metadata, pkg$data, pkg$resource_map))\n\n\nMy profile\nThe datasets that render under a user’s profile page like here are added if one of the following three System Metadata fields exists. The subject is the rightsHolder or the subject has one of either write or changePermission in the accessPolicy.\nIf you ever need to remove a subject from the accessPolicy or update the rightsHolder you can use arcticdatautils::remove_access and arcticdatautils::set_rightsHolder, respectively."
  },
  {
    "objectID": "edit_data_packages.html#update-a-package-with-a-new-data-object",
    "href": "edit_data_packages.html#update-a-package-with-a-new-data-object",
    "title": "Edit Data Packages",
    "section": "Update a package with a new data object",
    "text": "Update a package with a new data object\nOnce you have updated the data objects and saved the metadata to a file, we can update the metadata and use replaceMember to update the package with the new metadata.\nMake sure you have the package you want to update loaded into R using dataone::getDataPackage().\n\nPublish update\nNow we can update your data package to include the new data object. Assuming you have updated your data package earlier something like the below:\n\nd1c_test <- dataone::D1Client(\"STAGING\", \"urn:node:mnTestARCTIC\")\npackageId <- \"the resource map\"\n\ndp <- getDataPackage(d1c_test, identifier=packageId, lazyLoad=TRUE, quiet=FALSE)\nmetadataId <- selectMember(dp, name=\"sysmeta@formatId\", value=\"https://eml.ecoinformatics.org/eml-2.2.0\")\n\n#some modification to the EML here\n\neml_path <- \"path/to/your/saved/eml.xml\"\nwrite_eml(doc, eml_path)\n\ndp <- replaceMember(dp, metadataId, replacement=eml_path)\n\nYou can then upload your data package:\n\nmyAccessRules <- data.frame(subject=\"CN=arctic-data-admins,DC=dataone,DC=org\", permission=\"changePermission\") \npackageId <- uploadDataPackage(d1c_test, dp, public=FALSE, accessRules=myAccessRules, quiet=FALSE)\n\nIf a package is ready to be public, you can change the public argument in the datapack::uploadDataPackage() call to TRUE.\nIf you want to publish with a DOI (Digital Object Identifier) instead of a UUID (Universally Unique Identifier), you need to do this when replacing the metadata. This should only be done after the package is finalized and has been thoroughly reviewed!\n\ndoi <- dataone::generateIdentifier(d1c_test@mn, \"DOI\")\ndp <- replaceMember(dp, metadataId, replacement=eml_path, newId=doi)\n\nnewPackageId <- uploadDataPackage(d1c_test, dp, public=TRUE, quiet=FALSE)\n\nIf there is a pre-issued DOI (researcher requested the DOI for the publication first), please do the following:\n\ndp <- replaceMember(dp, metadataId, replacement=eml_path, newId=\"your pre-issued doi previously generated\")\n\nnewPackageId <- uploadDataPackage(d1c_test, dp, public=TRUE, quiet=FALSE)\n\nIf the package has children, see how to do this using arcticdatautils::publish_update in the nesting section of the reference manual.\nRefresh the landing page at test.arcticdata.io/#view/… for this package and then follow the “newer version” link to view the latest."
  },
  {
    "objectID": "edit_data_packages.html#update-a-data-object",
    "href": "edit_data_packages.html#update-a-data-object",
    "title": "Edit Data Packages",
    "section": "Update a data object",
    "text": "Update a data object\nTo update a data file associated with a data package, you need to do three things:\n\nupdate the object itself,\nupdate the resource map (which affiliates the object with the metadata), and\nupdate the metadata that describes that object\n\nThe datapack::replaceMember function takes care of the first two of these tasks. First you need to get the pid of the file you want to replace by using datapack::selectMember:\n\nmetadataId <- selectMember(dp, name=\"sysmeta@formatId\", value=\"https://eml.ecoinformatics.org/eml-2.2.0\")\n\nThen use replaceMember:\n\ndp <- replaceMember(dp, metadataId, replacement=file_path)\n\nIf you want to remove some files from the data package we can use datapack::removeMember. If we wanted to remove all the zip files associated with this data package, we can use datapack::removeMember:\n\nzipId <- selectMember(dp, name=\"sysmeta@formatId\", value=\"application/vnd.shp+zip\")\nremoveMember(dp, zipId, removeRelationships = T)\n\n\n\n\n\n\n\nNote\n\n\n\nYou will need to be explicit about your format_id here based on the file type. A list of format IDs can be found here on the DataONE website. Use line 2 (Id:) exactly, character for character.\n\n\nTo accomplish the second task, you will need to update the metadata using the EML package. This is covered in Chapter 4. After you update a file, you will always need to update the metadata because parts of the physical section (such as the file size, checksum) will be different, and it may also require different attribute information.\nOnce you have updated your metadata and saved it, you can update the package itself."
  },
  {
    "objectID": "edit_eml.html",
    "href": "edit_eml.html",
    "title": "Edit EML",
    "section": "",
    "text": "There are multiple ways to edit an EML element.\n\n\nThe most basic way to edit an EML element would be to navigate to the element and replace it with something else. Easy!\nFor example, to change the title one could use the following command:\n\ndoc$dataset$title <- \"New Title\"\n\nIf the element you are editing allows for multiple values, you can pass it a list of character strings. Since a dataset can have multiple titles, we can do this:\n\ndoc$dataset$title <- list(\"New Title\", \"Second New Title\")\n\nHowever, this isn’t always the best method to edit the EML, particularly if the element has sub-elements.\n\n\n\nTo edit a section where you are not 100% sure of the sub-elements, using the eml$elementName() helper functions from the EML package will pre-populate the options for you if you utilize the RStudio autocomplete functionality. The arguments in these functions show the available slots for any given EML element. For example, typing doc$dataset$abstract <- eml$abstract()<TAB> will show you that the abstract element can take either the section or para sub-elements.\n\n\n\n\ndoc$dataset$abstract <- eml$abstract(para = \"A concise but thorough description of the who, what, where, when, why, and how of a dataset.\")\n\nThis inserts the abstract with a para element in our dataset, which we know from the EML schema is valid.\nNote that the above is equivalent to the following generic construction:\n\ndoc$dataset$abstract <- list(para = \"A concise but thorough description of the who, what, where, when, why, and how of a dataset.\")\n\nThe eml() family of functions provides the sub-elements as arguments, which is extremely helpful, but functionally all it is doing is creating a named list, which you can also do using the list function.\n\n\n\nA final way to edit an EML element would be to build a new object to replace the old object. To begin, you might create an object using an eml helper function. Let’s take keywords as an example. Sometimes keyword lists in a metadata record will come from different thesauruses, which you can then add in series (similar to the way we added multiple titles) to the element keywordSet.\nWe start by creating our first set of keywords and saving it to an object.\n\nkw_list_1 <- eml$keywordSet(keywordThesaurus = \"LTER controlled vocabulary\",\n                            keyword = list(\"bacteria\", \"carnivorous plants\", \"genetics\", \"thresholds\"))\n\nWhich returns:\n$keyword\n$keyword[[1]]\n[1] \"bacteria\"\n\n$keyword[[2]]\n[1] \"carnivorous plants\"\n\n$keyword[[3]]\n[1] \"genetics\"\n\n$keyword[[4]]\n[1] \"thresholds\"\n\n\n$keywordThesaurus\n[1] \"LTER controlled vocabulary\"\nWe create the second keyword list similarly:\n\nkw_list_2 <- eml$keywordSet(keywordThesaurus = \"LTER core area\", \n                            keyword =  list(\"populations\", \"inorganic nutrients\", \"disturbance\"))\n\nFinally, we can insert our two keyword lists into our EML document just like we did with the title example above, but rather than passing character strings into list(), we will pass our two keyword set objects.\n\ndoc$dataset$keywordSet <- list(kw_list_1, kw_list_2)\n\n\n\n\n\n\n\nNote\n\n\n\nNote that you must use the function list here and not the c() function. The reasons for this are complex, and due to some technical subtlety in R - but the gist of the issue is that the c() function can behave in unexpected ways with nested lists, and frequently will collapse the nesting into a single level, resulting in invalid EML."
  },
  {
    "objectID": "edit_eml.html#edit-attributelists",
    "href": "edit_eml.html#edit-attributelists",
    "title": "Edit EML",
    "section": "Edit attributeLists",
    "text": "Edit attributeLists\nAttributes are descriptions of variables, typically columns or column names in tabular data. Attributes are stored in an attributeList. When editing attributes in R, you need to create one to three objects:\n\nA data.frame of attributes\nA data.frame of custom units (if applicable)\n\nThe attributeList is an element within one of 4 different types of entity objects. An entity corresponds to a file, typically. Multiple entities (files) can exist within a dataset. The 4 different entity types are dataTable (most common for us), spatialVector, spatialRaster, and otherEntity\nPlease note that submitting attribute information through the website will store them in an otherEntity object by default. We prefer to store them in a dataTable object for tabular data or a spatialVector object for spatial data.\nTo edit or examine an existing attribute table already in an EML file, you can use the following commands, where i represents the index of the series element you are interested in. Note that if there is only one item in the series (ie there is only one dataTable), you should just call doc$dataset$dataTable, as in this case doc$dataset$dataTable[[1]] will return the first sub-element of the dataTable (the entityName)\n\n# If they are stored in an otherEntity (submitted from the website by default)\nattributeList <- EML::get_attributes(doc$dataset$otherEntity[[i]]$attributeList)\n\n# Or if they are stored in a dataTable (usually created by a datateam member)\nattributeList <- EML::get_attributes(doc$dataset$dataTable[[i]]$attributeList)\n\n# Or if they are stored in a spatialVector (usually created by a datateam member)\nattributeList <- EML::get_attributes(doc$dataset$spatialVector[[i]]$attributeList)\n\nattributes <- attributeList$attributes\nprint(attributes)\n\n\nEdit attributes\nAttribute information should be stored in a data.frame with the following columns:\n\nattributeName: The name of the attribute as listed in the csv. Required. e.g.: “c_temp”\nattributeLabel: A descriptive label that can be used to display the name of an attribute. It is not constrained by system limitations on length or special characters. Optional. e.g.: “Temperature (Celsius)”\nattributeDefinition: Longer description of the attribute, including the required context for interpreting the attributeName. Required. e.g.: “The near shore water temperature in the upper inter-tidal zone, measured in degrees Celsius.”\nmeasurementScale: One of: nominal, ordinal, dateTime, ratio, interval. Required.\n\nnominal: unordered categories or text. e.g.: (Male, Female) or (Yukon River, Kuskokwim River)\nordinal: ordered categories. e.g.: Low, Medium, High\ndateTime: date or time values from the Gregorian calendar. e.g.: 01-01-2001\nratio: measurement scale with a meaningful zero point in nature. Ratios are proportional to the measured variable. e.g.: 0 Kelvin represents a complete absence of heat. 200 Kelvin is half as hot as 400 Kelvin. 1.2 meters per second is twice as fast as 0.6 meters per second.\ninterval: values from a scale with equidistant points, where the zero point is arbitrary. This is usually reserved for degrees Celsius or Fahrenheit, or latitude and longitude coordinates, or any other human-constructed scale. e.g.: there is still heat at 0° Celsius; 12° Celsius is NOT half as hot as 24° Celsius.\n\ndomain: One of: textDomain, enumeratedDomain, numericDomain, dateTime. Required.\n\ntextDomain: text that is free-form, or matches a pattern\nenumeratedDomain: text that belongs to a defined list of codes and definitions. e.g.: CASC = Cascade Lake, HEAR = Heart Lake\ndateTimeDomain: dateTime attributes\nnumericDomain: attributes that are numbers (either ratio or interval)\n\nformatString: Required for dateTime, NA otherwise. Format string for dates, e.g. “DD/MM/YYYY”.\ndefinition: Required for textDomain, NA otherwise. Definition for attributes that are a character string, matches attribute definition in most cases.\nunit: Required for numericDomain, NA otherwise. Unit string. If the unit is not a standard unit, a warning will appear when you create the attribute list, saying that it has been forced into a custom unit. Use caution here to make sure the unit really needs to be a custom unit. A list of standard units can be found using: standardUnits <- EML::get_unitList() then running View(standardUnits$units).\nnumberType: Required for numericDomain, NA otherwise. Options are real, natural, whole, and integer.\n\nreal: positive and negative fractions and integers (…-1,-0.25,0,0.25,1…)\nnatural: non-zero positive integers (1,2,3…)\nwhole: positive integers and zero (0,1,2,3…)\ninteger: positive and negative integers and zero (…-2,-1,0,1,2…)\n\nmissingValueCode: Code for missing values (e.g.: ‘-999’, ‘NA’, ‘NaN’). NA otherwise. Note that an NA missing value code should be a string, ‘NA’, and numbers should also be strings, ‘-999.’\nmissingValueCodeExplanation: Explanation for missing values, NA if no missing value code exists.\n\nYou can create attributes manually by typing them out in R following a workflow similar to the one below:\n\nattributes <- data.frame(\n    \n    attributeName = c('Date', 'Location', 'Region','Sample_No', 'Sample_vol', \n                      'Salinity', 'Temperature', 'sampling_comments'),\n    \n    attributeDefinition = c('Date sample was taken on', \n                            'Location code representing location where sample was taken',\n                            'Region where sample was taken', 'Sample number', 'Sample volume', \n                            'Salinity of sample in PSU', 'Temperature of sample', \n                            'comments about sampling process'),\n    \n    measurementScale = c('dateTime', 'nominal','nominal', 'nominal', 'ratio', \n                         'ratio', 'interval', 'nominal'),\n    \n    domain = c('dateTimeDomain', 'enumeratedDomain','enumeratedDomain', \n               'textDomain', 'numericDomain', 'numericDomain', \n               'numericDomain', 'textDomain'),\n    \n    formatString = c('MM-DD-YYYY', NA,NA,NA,NA,NA,NA,NA),\n    \n    definition = c(NA,NA,NA,'Sample number', NA, NA, NA, \n                   'comments about sampling process'),\n    \n    unit = c(NA, NA, NA, NA,'milliliter', 'dimensionless', 'celsius', NA),\n    \n    numberType = c(NA, NA, NA,NA, 'real', 'real', 'real', NA),\n    \n    missingValueCode = c(NA, NA, NA,NA, NA, NA, NA, 'NA'),\n    \n    missingValueCodeExplanation = c(NA, NA, NA,NA, NA, NA, NA, \n                                    'no sampling comments'))\n\nHowever, typing this out in R can be a major pain. Luckily, there’s a Shiny app that you can use to build attribute information. You can use the app to build attributes from a data file loaded into R (recommended as the app will auto-fill some fields for you) to edit an existing attribute table, or to create attributes from scratch. Use the following commands to create or modify attributes (these commands will launch a Shiny app in your web browser):\n\n#first download the CSV in your data package from Exercise #2\ndata_pid <- selectMember(dp, name = \"sysmeta@fileName\", value = \".csv\")\ndata <- read.csv(text=rawToChar(getObject(d1c_test@mn, data_pid)))\n\n\n# From data (recommended)\nEML::shiny_attributes(data = data)\n\n# From an existing attribute table\nattributeList <- get_attributes(doc$dataset$dataTable[[i]]$attributeList)\nEML::shiny_attributes(data = NULL, attributes = attributeList$attributes)\n\n# From scratch\natts <- EML::shiny_attributes()\n\nOnce you are done editing a table in the app, quit the app and the tables will be assigned to the atts variable as a list of data frames (one for attributes, factors, and units). Alternatively, each table can be to exported to a csv file by clicking the Download button.\nIf you downloaded the table, read the table back into your R session and assign it to a variable in your script (e.g. attributes <- data.frame(...)), or just use the variable that shiny_attributes returned.\nFor simple attribute corrections, datamgmt::edit_attribute() allows you to edit the slots of a single attribute within an attribute list. To use this function, pass an attribute through datamgmt::edit_attribute() and fill out the parameters you wish to edit/update. An example is provided below where we are changing attributeName, domain, and measurementScale in the first attribute of a dataset. After completing the edits, insert the new version of the attribute back into the EML document.\n\nnew_attribute <- datamgmt::edit_attribute(doc$dataset$dataTable[[1]]$attributeList$attribute[[1]], \n                          attributeName = 'date_and_time', \n                          domain = 'dateTimeDomain', \n                          measurementScale = 'dateTime')\n\ndoc$dataset$dataTable[[1]]$attributeList$attribute[[1]] <- new_attribute\n\n\n\nEdit custom units\nEML has a set list of units that can be added to an EML file. These can be seen by using the following code:\n\nstandardUnits <- EML::get_unitList()\nView(standardUnits$units)\n\nSearch the units list for your unit before attempting to create a custom unit. You can search part of the unit you can look up part of the unit ie meters in the table to see if there are any matches.\nIf you have units that are not in the standard EML unit list, you will need to build a custom unit list. A unit typically consists of the following fields:\n\nid: The unit id (ids are camelCased)\nunitType: The unitType (run View(standardUnits$unitTypes) to see standard unitTypes)\nparentSI: The parentSI unit (e.g. for kilometer parentSI = “meter”)\nmultiplierToSI: Multiplier to the parentSI unit (e.g. for kilometer multiplierToSI = 1000)\nname: Unit abbreviation (e.g. for kilometer name = “km”)\ndescription: Text defining the unit (e.g. for kilometer description = “1000 meters”)\n\nTo manually generate the custom units list, create a dataframe with the fields mentioned above. An example is provided below that can be used as a template:\n\ncustom_units <- data.frame(   \n  id = c('siemensPerMeter', 'decibar'),\n  unitType = c('resistivity', 'pressure'),\n  parentSI = c('ohmMeter', 'pascal'),\n  multiplierToSI = c('1','10000'),\n  abbreviation = c('S/m','decibar'),\n  description = c('siemens per meter', 'decibar'))\n\nUsing EML::get_unit_id for custom units will also generate valid EML unit ids. Custom units are then added to additionalMetadata using the following command:\n\nunitlist <- set_unitList(custom_units, as_metadata = TRUE)\ndoc$additionalMetadata <-  list(metadata = list(unitList = unitlist))\n\n\n\nEdit factors\nFor attributes that are enumeratedDomains, a table is needed with three columns: attributeName, code, and definition.\n\nattributeName should be the same as the attributeName within the attribute table and repeated for all codes belonging to a common attribute.\ncode should contain all unique values of the given attributeName that exist within the actual data.\ndefinition should contain a plain text definition that describes each code.\n\nTo build factors by hand, you use the named character vectors and then convert them to a data.frame as shown in the example below. In this example, there are two enumerated domains in the attribute list - “Location” and “Region”.\n\nLocation <- c(CASC = 'Cascade Lake', CHIK = 'Chikumunik Lake', \n              HEAR = 'Heart Lake', NISH = 'Nishlik Lake' )\n\nRegion <- c(W_MTN = 'West region, locations West of Eagle Mountain', \n            E_MTN = 'East region, locations East of Eagle Mountain')\n\nThe definitions are then written into a data.frame using the names of the named character vectors and their definitions.\n\nfactors <- rbind(data.frame(attributeName = 'Location', \n                            code = names(Location), \n                            definition = unname(Location)),\n                  data.frame(attributeName = 'Region', code = names(Region), \n                             definition = unname(Region)))\n\n\n\nFinalize attributeList\nOnce you have built your attributes, factors, and custom units, you can add them to EML objects. Attributes and factors are combined to form an attributeList using the following command:\n\nattributeList <- EML::set_attributes(attributes = attributes,\n                                     factors = factors) \n\nThis attributeList must then be added to a dataTable."
  },
  {
    "objectID": "edit_eml.html#edit-custom-units-1",
    "href": "edit_eml.html#edit-custom-units-1",
    "title": "Edit EML",
    "section": "Edit custom units",
    "text": "Edit custom units\nEML has a set list of units that can be added to an EML file. These can be seen by using the following code:\n\nstandardUnits <- EML::get_unitList()\nView(standardUnits$units)\n\nIf you have units that are not in the standard EML unit list, you will need to build a custom unit list. A unit typically consists of the following fields:\n\nid: The unit id (ids are camelCased)\nunitType: The unitType (run View(standardUnits$unitTypes) to see standard unitTypes)\nparentSI: The parentSI unit (e.g. for kilometer parentSI = “meter”)\nmultiplierToSI: Multiplier to the parentSI unit (e.g. for kilometer multiplierToSI = 1000)\nname: Unit abbreviation (e.g. for kilometer name = “km”)\ndescription: Text defining the unit (e.g. for kilometer description = “1000 meters”)\n\nTo manually generate the custom units list, create a dataframe with the fields mentioned above. An example is provided below that can be used as a template:\n\ncustom_units <- data.frame(\n    \n  id = c('partsPerThousand', 'decibar', 'wattsPerSquareMeter', 'micromolesPerGram', 'practicalSalinityUnit'),\n  unitType = c('dimensionless', 'pressure', 'power', 'amountOfSubstanceWeight'， 'dimensionless'),\n  parentSI = c(NA, 'pascal', 'watt', 'molesPerKilogram'， NA),\n  multiplierToSI = c(NA, '10000', '1', '1000000000', NA),\n  abbreviation = c('ppt', 'decibar', 'W/m^2', 'umol/g', 'PSU'),\n  description = c('parts per thousand', 'decibar', 'watts per square meter', 'micro moles per gram', 'used to describe the concentration of dissolved salts in water, the UNESCO Practical Salinity Scale of 1978 (PSS78) defines salinity in terms of a conductivity ratio'))\n\nUsing EML::get_unit_id for custom units will also generate valid EML unit ids.\nCustom units are then added to additionalMetadata using the following command:\n\nunitlist <- set_unitList(custom_units, as_metadata = TRUE)\ndoc$additionalMetadata <- unitlist\n\nIf units that should be standardUnit are added as customUnit, you can use the following code to fix this issue: ::: {.cell}\n# add standard unit\ndoc$dataset$dataTable[[i]]$attributeList$attribute[[i]]$measurementScale$ratio$unit$standardUnit <- \"your standard unit\"\n\n# get rid of custom unit\ndoc$dataset$dataTable[[i]]$attributeList$attribute[[i]]$measurementScale$ratio$unit$customUnit <- NULL\n:::\nIf you want to find all of the positions of a certain custom unit that should be standard, try this code: ::: {.cell}\nls <- purrr::map(doc$dataset$dataTable[[i]]$attributeList$attribute, \n                  ~str_detect(.x$measurementScale$ratio$unit$customUnit, \"your standard unit\"))\n                  \nwhich(ls == TRUE)\n:::"
  },
  {
    "objectID": "edit_eml.html#edit-datatables",
    "href": "edit_eml.html#edit-datatables",
    "title": "Edit EML",
    "section": "Edit dataTables",
    "text": "Edit dataTables\nTo edit a dataTable, first edit/create an attributeList and set the physical. Then create a new dataTable using the eml$dataTable() helper function as below:\n\ndataTable <- eml$dataTable(entityName = \"A descriptive name for the data (does not need to be the same as the data file)\",\n                           entityDescription = \"A description of the data\",\n                           physical = physical,\n                           attributeList = attributeList)\n\nThe dataTable must then be added to the EML. How exactly you do this will depend on whether there are dataTable elements in your EML, and how many there are. To replace whatever dataTable elements already exist, you could write:\n\ndoc$dataset$dataTable <- dataTable\n\nIf there is only one dataTable in your dataset, the EML package will usually “unpack” these, so that it is not contained within a list of length 1 - this means that to add a second dataTable, you cannot use the syntax doc$dataset$dataTable[[2]], since when unpacked this will contain the entityDescription as opposed to pointing to the second in a series of dataTable elements. Confusing - I know. Not to fear though - this syntax will get you on your way, should you be trying to add a second dataTable.\n\ndoc$dataset$dataTable <- list(doc$dataset$dataTable, dataTable)\n\nIf there is more than one dataTable in your dataset, you can return to the more straightforward construction of:\n\ndoc$dataset$dataTable[[i]] <- dataTable \n\nWhere i is the index that you wish insert your dataTable into.\nTo add a list of dataTables to avoid the unpacking problem above you will need to create a list of dataTables\n\ndts <- list() # create an empty list\nfor(i in seq_along(tables_you_need)){\n  # your code modifying/creating the dataTable here\n  dataTable <- eml$dataTable(entityName = dataTable$entityName,\n                             entityDescription = dataTable$entityDescription,\n                             physical = physical,\n                             attributeList = attributeList)\n  \n  dts[[i]] <- dataTable # add to the list\n}\n\nAfter getting a list of dataTables, assign the resulting list to dataTable EML.\n\ndoc$dataset$dataTable <- dts\n\nBy default, the online submission form adds all entities as otherEntity, even when most should probably be dataTable. You can use eml_otherEntity_to_dataTable to easily move items in otherEntity over to dataTable. Most tabular data or data that contain variables should be listed as a dataTable. Data that do not contain variables (eg: plain text readme files, pdfs, jpegs) should be listed as otherEntity.\n\neml_otherEntity_to_dataTable(doc, \n                             1, # which otherEntities you want to convert, for multiple use - 1:5\n                             validate_eml = F) # set this to False if the physical or attributes are not added"
  },
  {
    "objectID": "edit_eml.html#semantic-annotations",
    "href": "edit_eml.html#semantic-annotations",
    "title": "Edit EML",
    "section": "Semantic annotations",
    "text": "Semantic annotations\nFor a brief overview of what a semantic annotation is, and why we use them check out this video.\nEven more information on how to add semantic annotations to EML 2.2.0 can be found here. Currently metacatUI does not support the editing of semantic annotations on the website so all changes will have to be done in R.\nThere are several elements in the EML 2.2.0 schema that can be annotated:\n\ndataset\nentity (eg: otherEntity or dataTable)\nattribute\n\nOn the datateam, we will only be adding annotations to attributes for now.\n\nHow annotations are used\nThis is a dataset that has semantic annotations included.\nOn the website you can see annotations in each of the attributes.\n\n\nYou can click on any one of them to search for more datasets with that same annotation.\n\n\nAttribute-level annotations\nTo add annotations to the attributeList you will need information about the propertyURI and valueURI\nAnnotations are essentially composed of a sentence, which contains a subject (the attribute), predicate (propertyURI), and object (valueURI). Because of the way our search interface is built, for now we will be using attribute annotations that have a propertyURI label of “contains measurements of type”.\nHere is what an annotation for an attribute looks like in R. Note that both the propertyURI and valueURI have both a label, and the URI itself.\n\ndoc$dataset$dataTable[[i]]$attributeList$attribute[[i]]$annotation\n\n$id\n[1] \"ODBcOyaTsg\"\n\n$propertyURI\n$propertyURI$label\n[1] \"contains measurements of type\"\n\n$propertyURI$propertyURI\n[1] \"http://ecoinformatics.org/oboe/oboe.1.2/oboe-core.owl#containsMeasurementsOfType\"\n\n\n$valueURI\n$valueURI$label\n[1] \"Distributed Biological Observatory region identifier\"\n\n$valueURI$valueURI\n[1] \"http://purl.dataone.org/odo/ECSO_00002617\"\n\n\n\n\n\n\nNote\n\n\n\nSemantic attribute annotations can be applied to spatialRasters, spatialVectors and dataTables\n\n\n\n\n\nHow to add an annotation\n1. Decide which variable to annotate\nThe goal for the datateam is to start annotating every dataset that comes in. Please make sure to add semantic annotations to spatial and temporal features such as latitude, longitude, site name and date and aim to annotate as many attributes as possible.\n2. Find an appropriate valueURI\nThe next step is to find an appropriate value to fill in the blank of the sentence: “this attribute contains measurements of _____.”\nThere are several ontologies to search in. In order of most to least likely to be relevant to the Arctic Data Center they are:\n\nThe Ecosystem Ontology (ECSO)\n\nthis was developed at NCEAS, and has many terms that are relevant to ecosystem processes, especially those involving carbon and nutrient cycling\n\nThe Environment Ontology (EnVO)\n\nthis is an ontology for the concise, controlled description of environments\n\nNational Center for Biotechnology Information (NCBI) Organismal Classification (NCBITAXON)\n\nThe NCBI Taxonomy Database is a curated classification and nomenclature for all of the organisms in the public sequence databases.\n\nInformation Artifact Ontology (IAO)\n\nthis ontology contains terms related to information entities (eg: journals, articles, datasets, identifiers)\n\n\nTo search, navigate through the “classes” until you find an appropriate term. When we are picking terms, it is important that we not just pick a similar term or a term that seems close - we want a term that is totally “right”. For example, if you have an attribute for carbon tetroxide flux and an ontology with a class hierarchy like this:\n– carbon flux\n|—- carbon dioxide flux\nOur exact attribute, carbon tetroxide flux is not listed. In this case, we should pick “carbon flux” as it’s completely correct and not “carbon dioxide flux” because it’s more specific but not quite right.\n\n\n\n\n\n\nNote\n\n\n\nFor general attributes (such as ones named depth or length), it is important to be as specific as possible about what is being measured.\ne.g. selecting the lake area annotation for the area attribute in this dataset\n\n\n3. Build the annotation in R\n\nManually Annotating\nthis method is great for when you are inserting 1 annotation, fixing an existing annotation or programmatically updating annotations for multiple attributeLists\nFirst you need to figure out the index of the attribute you want to annotate.\n\neml_get_simple(doc$dataset$dataTable[[3]]$attributeList, \"attributeName\")\n\n [1] \"prdM\"         \"t090C\"        \"t190C\"        \"c0mS/cm\"      \"c1mS/cm\"      \"sal00\"        \"sal11\"        \"sbeox0V\"      \"flECO-AFL\"\n[10] \"CStarTr0\"     \"cpar\"         \"v0\"           \"v4\"           \"v6\"           \"v7\"           \"svCM\"         \"altM\"         \"depSM\"    \n[19] \"scan\"         \"sbeox0ML/L\"   \"sbeox0dOV/dT\" \"flag\"    \nNext, assign an id to the attribute. It should be unique within the document, and it’s nice if it is human readable and related to the attribute it is describing. One format you could use is entity_x_attribute_y which should be unique in scope, and is nice and descriptive.\n\ndoc$dataset$dataTable[[3]]$attributeList$attribute[[6]]$id <- \"entity_ctd_attribute_salinity\"\n\nNow, assign the propertyURI information. This will be the same for every annotation you build.\n\ndoc$dataset$dataTable[[3]]$attributeList$attribute[[6]]$annotation$propertyURI <- list(label = \"contains measurements of type\",\n                                                                                       propertyURI = \"http://ecoinformatics.org/oboe/oboe.1.2/oboe-core.owl#containsMeasurementsOfType\")\n\nFinally, add the valueURI information from your search.\n You should see an ID on the Bioportal page that looks like a URL - this is the valueURI. Use the value to populate the label element.\n\ndoc$dataset$dataTable[[3]]$attributeList$attribute[[6]]$annotation$valueURI <- list(label = \"Water Salinity\",\n     valueURI = \"http://purl.dataone.org/odo/ECSO_00001164\")\n\n\n\nShiny Attributes\nthis method is great for when you are updating many attributes\nOn the far right of the table of shiny_attributes there are 4 columns: id, propertyURI, propertyLabel, valueURI, valueLabel that can be filled out.\n\n\n\nAnnotating sensitive data\nSensitive datasets that might cover protected characteristics (human subjects data, endangered species locations, etc) should be annotated using the data sensitivity ontology: https://bioportal.bioontology.org/ontologies/SENSO/?p=classes&conceptid=root.\n\nDataset Annotations\nAs a final step in the data processing pipeline, we will categorize the dataset. We are trying to categorize datasets so we can have a general idea of what kinds of data we have at the Arctic Data Center.\nDatasets will be categorized using the Academic Ontology. These annotations will be seen at the top of the landing page, and can be thought of as “themes” for the dataset. In reality, they are dataset-level annotations.\nBe sure to ask your peers in the #datateam slack channel whether they agree with the themes you think best fit your dataset. Once there is consensus, use the following line of code:\n\ndoc <- datamgmt::eml_categorize_dataset(doc, c(\"list\", \"of\", \"themes\"))"
  },
  {
    "objectID": "edit_eml.html#edit-spatial-data",
    "href": "edit_eml.html#edit-spatial-data",
    "title": "Edit EML",
    "section": "Edit spatial data",
    "text": "Edit spatial data\nOccasionally, you may encounter a third type of data object: spatialVector and spatialRaster. These objects contains spatial data (ie maps), such as a shapefile or geodatabase.\nEditing a spatialVector or spatialRaster is similar to editing a dataTable or an otherEntity. A physical and attributeList should be present. We will focus on how to get the information unique to spatialData and how to create the spatialVector/spatialRaster\n\nFile types\nFile extensions to look for that might be spatial data: kml, geoJSON, geoTIFF, .dbf, .shp, and .shx\nAdditionally, spatial data that involve multiple files should typically be archived within a .zip file to ensure all related and interdependent files stay together (ie . a geodatabase). This is one of the exceptions to our rule regarding .zip files.\nFor example, a spatial dataset for a shapefile should, at a minimum, consist of separate .dbf, .shp, and .shx files with the same prefix in the same directory. All these files are required in order to use the data. Also note that shapefiles limit attribute names to 10 characters, so attribute names in the metadata may not match exactly to attribute names in the data. Some spatial raster data come as standalone files (.tiff or .nc) and some come as a group of files. If you aren’t sure whether to unzip a file, ask Jasmine or Jeanette.\n\n\n\n\n\n\nNote\n\n\n\nThere are specific formatIds for these kinds of zipped files: application/vnd.shp+zip image/geotiff+zip. Remember to check that the files have the correct formatId\n\n\n\n\nReading Spatial Files\nRead in the files to (1) help you in creating your attributes table and (2) sometimes also figure out the coordinate reference system.\nlibrary(sf)\nspatial_file <- sf::read_sf(\"example.kml\")\n\n\n\n\n\n\nNote\n\n\n\nWhen you read kml files, read_sf() sometimes shows additional columns that aren’t in the actual file. Always open kml files in text editor to check if the columns actually exist.\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf it is a zipped shapefile there is a handy function you can use arcticdatautils::read_zip_shapefile(mn, pid)\n\n\n\nCoordinate Systems\nThe coordinate system allow to work with spatial data using the same frame of reference (a Datum). A common coordinate system is “GCS_WGS_1984 (used in Google Maps!) which is suitable for plotting points distributed globally. There are many others that may be better suited for certain areas in the world.\nAll latitudes and longitude coordinates should have a coordinate system (like a frame of reference).\nThere are horizontal coordinate systems (earth’s surface) and vertical coordinate systems (depth). More information can be found here.\nTo find the horizCoordSysName you can use:\nsf::st_crs(spatial_file)\nTake the Datum and add GCS (Geographic Coordinate System) in front. For example: “GCS_WGS_1984”\n\n\n\nspatialVector\n\nAdding Geometry\nOne important difference is that a spatialVector object should also have a geometry slot that describes the geometry features of the data. The possible values include one or more (in a list) of ‘Point’, ‘LineString’, ‘LinearRing’, ‘Polygon’, ‘MultiPoint’, ‘MultiLineString’, ‘MultiPolygon’, or ‘MultiGeometry’. You will likely have to open the file itself within QGIS or R (ie . the sf package) to get the correct geometry value.\nTo add just a geometry slot use:\n\ndoc$dataset$spatialVector[[1]]$geometry <- \"Polygon\"\n\nTo add it using the data pid: 1. Get the geometry and spatialReference 2. Use pid_to_eml_entity() to generate the spatialVector\n spatialVector <- pid_to_eml_entity(adc, \n                                    pkg$data[n], \n                                    entity_type = \"spatialVector\",\n                                    entityName = \"filename.kml\",\n                                    entityDescription = \"some desciption\",\n                                    attributeList = attributeList,\n                                    geometry = \"Point\",\n                                    spatialReference = list(horizCoordSysName = \"GCS_WGS_1984\"))\n\nAdd the spatialVector to the doc\n\ndoc$dataset$spatialVector[[1]] <- spatialVector\n\n\n\nspatialRasters\nMost often these come in GeoTiff or Tiff files. The data is presented as a grid of “pixels”. For more information ESRI has a indepth article here.\nTo use the helper function get:\n\nthe path of your raster file\nan attribute table\na coordinate system\n\nTo get a coordinate system name, you can use the output of the function on your first try (which will print the coordinate reference system, if it is defined). You can use the return value of get_coord_list() (a large data.frame) to find the correct coordinate system name.\nAnother way to get the coordinate system name is using rgdal::GDALinfo(path). This function can provide many details for your GeoTiff or Tiff files including the coordinate system name. More information can be found here here.\nrgdal::GDALinfo(path)\n\neml_get_raster_metadata(path, coord_name, attributes)"
  },
  {
    "objectID": "edit_eml.html#format-text-in-eml",
    "href": "edit_eml.html#format-text-in-eml",
    "title": "Edit EML",
    "section": "Format text in EML",
    "text": "Format text in EML\nCurrently, only certain fields (abstracts, methods) support text formatting in EML. Check out this demo for a full example. Additional info is also available here.\n\n\n\n\n\n\nNote\n\n\n\nMany of these formatting functions only work when enclosed by <para></para>\n\n\nYou can insert these tags directly into the EML document using syntax that looks like this:\n\ndoc$dataset$abstract <- eml$abstract(para = \"Some abstracts require subscripts like CO<subscript>2</subscript>\")\n\n\nType-setting\nSubscripts, superscripts, and italics:\n<subscript>You can do subscripts</subscript>\n<superscript>or superscipts</superscript>\n<emphasis>or even italics.</emphasis> \n\n\nLinks\nBe sure to include the “https://” before the link or it will redirect incorrectly. Also, always check that your links go through to the correct page. Please be aware that most links are inherently unstable so always default to archiving files over pointing to websites when possible and appropriate.\n<ulink url=\"https://some_url.com\">\n    <citetitle>some text</citetitle>\n</ulink>\n\n\nLists\nUnordered (bulleted) lists:\n<itemizedlist>\n    <listitem>\n        <para>Paragraphs</para>\n    </listitem>\n    <listitem>\n        <para>Sections w/ subsections (w/ titles)</para>\n    </listitem>\n</itemizedlist>\nOrdered lists (1, 2, 3)…\n<orderedlist>\n    <listitem>\n        <para>something</para>\n    </listitem>\n    <listitem>\n        <para>something else</para>\n    </listitem>\n</orderedlist>"
  },
  {
    "objectID": "edit_eml.html#series-identifier-sid",
    "href": "edit_eml.html#series-identifier-sid",
    "title": "Edit EML",
    "section": "Series Identifier (SID)",
    "text": "Series Identifier (SID)\nA series identifier is a system metadata field that represents a single identifier across multiple versions of a data package, a feature often requested by submitters. These are useful for maintaining a single identifier when a data package is expected to receive updates (usually additional data) in the future. For example, this dataset has a series id: https://doi.org/10.18739/A2154DQ22 (the doi and urn:uuid are both present at the top of the dataset).\n\nAdding a SID to a package\nAdding a series identifier should be the last step. In most cases the SID will be in DOI format. Once the data package is complete (peer-reviewd and approved by the PI) the series identifier can be added by updating the seriesId field of the system metadata of the metadata object.\n\n# The metadata identifier we're assigning an SID to\nmetadata_pid <- 'metadata_pid'\n\nsys <- getSystemMetadata(mn, metadata_pid)\nsys@seriesId <- generateIdentifier(mn, scheme = 'DOI') #update the scheme argument if it should not be a DOI\nupdateSystemMetadata(mn, metadata_pid, sys)\n\n\n\nUpdating the child packages of a parent package with a SID\nWhen updating a parent package with a series identifier you need to use update_resource_map rather than publish_update. In this case our goal is add nested data packages to an existing parent package.\n\n# Call get_package on the parent package that has a `seriesId` in its system metadata \nparent_package <- get_package(mn, 'resource_map_pid')\n# The resource map of the package we want to add to the 'child_pids' of the parent\nresource_map_new_child <- '' \n\nupdate_resource_map(mn, parent_package$resource_map, parent_package$metadata, parent_package$data,\n                    c(parent_package$child_packages, resource_map_new_child))\n\n\n\nUpdating the metadata of a package with a SID\nWhen updating the metadata (xml) of a package with a series identifier use publish_update. It’s important that you pass the metadata pid to the metadata_pid argument rather than seriesId. The metadata pid will usually have the text “version:” ahead of it, however it’s best to use get_package first to avoid mistakes. ::: {.cell}\npkg <- get_package(mn, 'resource_map_pid')\npkg <- publish_update(mn, pkg$metadata, pkg$resource_map, pkg$data, \n                      child_pids = pkg$child_pids) # + any additional arguments to \"publish_update\"\n:::"
  },
  {
    "objectID": "edit_eml.html#set-coverages",
    "href": "edit_eml.html#set-coverages",
    "title": "Edit EML",
    "section": "Set coverages",
    "text": "Set coverages\nSometimes EML documents may lack coverage information describing the temporal, geographic, or taxonomic coverage of a data set. This example shows how to create coverage information from scratch, or replace an existing coverage element with an updated one. You can view the current coverage (if it exists) by entering doc$dataset$coverage into the console. Here the coverage, including temporal, taxonomic, and geographic coverages, is defined using set_coverage().\n\ncoverage <- EML::set_coverage(beginDate = '2012-01-01', \n                              endDate = '2012-01-10', \n                              sci_names = c('exampleGenus exampleSpecies1', 'exampleGenus ExampleSpecies2'),\n                              geographicDescription = \"The geographic region covers the lake region near Eagle Mountain, Alaska.\",\n                              west = -154.6192, \n                              east = -154.5753, \n                              north = 68.3831, \n                              south = 68.3619)\ndoc$dataset$coverage <- coverage\n\n\nSet multiple coverages\nYou can also set multiple geographic (or temporal) coverages. Here is an example of how you might set two geographic coverages. Note that we use nested eml function helpers in this construction.\n\ngeocov1 <- eml$geographicCoverage(geographicDescription = \"The geographich region covers area 1\",\n                                  boundingCoordinates = eml$boundingCoordinates(\n                                         northBoundingCoordinate = 68,\n                                         eastBoundingCoordinate = -154,\n                                         southBoundingCoordinate = 67,\n                                         westBoundingCoordinate = -155))\n\ngeocov2 <- eml$geographicCoverage(geographicDescription = \"The geographich region covers area 2\",\n                                  boundingCoordinates = eml$boundingCoordinates(\n                                         northBoundingCoordinate = 65,\n                                         eastBoundingCoordinate = -151,\n                                         southBoundingCoordinate = 62,\n                                         westBoundingCoordinate = -153))\n\ncoverage <- EML::set_coverage(beginDate = '2012-01-01', \n                              endDate = '2012-01-10', \n                              sci_names = list('exampleGenus exampleSpecies1', 'exampleGenus ExampleSpecies2'))\n\ndoc$dataset$coverage$geographicCoverage <- list(geocov1, geocov2)\n\n\n\nSpecial coverages\n\nArctic Circle\nFor arctic circle geographic coverage, we only have the starting vertical line of the circle shown in the projection. Here is an example with arctic circle geographic coverage.\n\n\nGeologic dates\nExample dataset with geologic coverages set using the following: ::: {.cell}\ngeo_time_start <- EML::eml$alternativeTimeScale(timeScaleName = \"Absolute\",\n                                                timeScaleAgeEstimate = \"7.5 Myr\")\n\ncoverage <- EML::set_coverage(beginDate = '2012-01-01', \n                              endDate = '2012-01-10', \ndoc$dataset$coverage <- coverage\n:::"
  },
  {
    "objectID": "edit_eml.html#set-methods",
    "href": "edit_eml.html#set-methods",
    "title": "Edit EML",
    "section": "Set methods",
    "text": "Set methods\nThe methods tree in the EML section has many different options, visible in the schema. You can create new elements in the methods tree by following the schema and using the eml helpers.\nAnother simple and potentially useful way to add methods to an EML that has no methods at all is by adding them via a MS Word document. An example is shown below:\n\nmethods1 <- set_methods('methods_doc.docx')\ndoc$dataset$methods <- methods1\n\nIf you want to make minor changes to existing methods information that has a lot of nested elements, your best bet may be to edit the EML manually in a text editor (or in RStudio), otherwise there is a risk of accidentally overwriting nested elements with blank object classes, therefore losing methods information.\n\nAdding sampling info to methods section\n\n# add method steps as new variables\nstep1 <- eml$methodStep(description = \"text describing the methods used\")\n\nstEx <- eml$studyExtent(description = \"study extent description\")\n\nsamp <- eml$sampling(studyExtent = stEx,\n                     samplingDescription = \"sampling description text\")\n\n\n# combine all methods steps and sampling info \nmethods1 <- eml$methods(methodStep = step1, \n                        sampling = samp)\n\ndoc$dataset$methods <- methods1"
  },
  {
    "objectID": "edit_eml.html#set-parties",
    "href": "edit_eml.html#set-parties",
    "title": "Edit EML",
    "section": "Set parties",
    "text": "Set parties\nThe address, creator, contact, and associatedParty classes can easily be created using functions from the EML package. However it is often easier to just edit this through the webform.\nTo add people, with their addresses, you need to add addresses as their own object class, which you then add to the contact, creator, or associatedParty classes.\n\nNCEASadd <- eml$address( \n                deliveryPoint = \"735 State St #300\", \n                city = \"Santa Barbara\", \n                administrativeArea = 'CA', \n                postalCode = '93101')\n\nHere, we use eml_creator() to set our data set creator.\n\nJC_creator <- eml$creator(individualName = list(givenName = \"Jeanette\", \n                                                surName = \"Clark\"), \n                          organization = \"NCEAS\", \n                          electronicMailAddress = \"jclark@nceas.ucsb.edu\", \n                          phone = \"123-456-7890\", \n                          userId = \"https://orcid.org/WWWW-XXXX-YYYY-ZZZZ\",\n                          address = NCEASadd)\ndoc$dataset$creator <- JC_creator\n\nSimilarly, we can set a single contact or multiple. In this case, there are two, so we set doc$dataset$contact as a list containing both of them.\n\nJC_contact <- eml$contact(individualName = list(givenName = \"Jeanette\", \n                                                surName = \"Clark\"), \n                          organization = \"NCEAS\", \n                          electronicMailAddress = \"jclark@nceas.ucsb.edu\", \n                          phone = \"123-456-7890\",  \n                          userId = \"https://orcid.org/WWWW-XXXX-YYYY-ZZZZ\",id = eml$userId(directory = eml$dir)\n                          address = NCEASadd)\n\nJG_contact <- eml$contact(individualName = list(givenName = \"Jesse\", \n                                                surName = \"Goldstein\"), \n                          organization = \"NCEAS\", \n                          electronicMailAddress = \"jgoldstein@nceas.ucsb.edu\", \n                          phone = \"123-456-7890\",  \n                          userId = \"https://orcid.org/WWWW-XXXX-YYYY-ZZZZ\",\n                          address = NCEASadd)\n\ndoc$dataset$contact <- list(JC_contact, JG_contact)\n\nFinally, the associatedPartys are set. Note that associatedPartys MUST have a role defined, unlike creator or contact.\n\nJG_ap <- eml$associatedParty(individualName = list(givenName = \"Jesse\", \n                                                   surName = \"Goldstein\"),\n                             organization = \"NCEAS\", \n                             email = \"jgoldstein@nceas.ucsb.edu\",\n                             electronicMailAddress = \"123-456-7890\",  \n                             address = NCEASadd, \n                             userId = \"https://orcid.org/WWWW-XXXX-YYYY-ZZZZ\",\n                             role = \"metadataProvider\")\ndoc$dataset$associatedParty <- JG_ap"
  },
  {
    "objectID": "edit_eml.html#set-physical",
    "href": "edit_eml.html#set-physical",
    "title": "Edit EML",
    "section": "Set physical",
    "text": "Set physical\nTo set the physical aspects of a data object, use the following commands to build a physical object from a data PID that exists in your package. Remember to set the member node to test.arcticdata.io!\n\n\n\n\n\n\nNote\n\n\n\nThe word ‘physical’ derives from database systems, which distinguish the ‘logical’ model (e.g., what attributes are in a table, etc) from the physical model (how the data are written to a physical hard disk (basically, the serialization). so, we grouped metadata about the file (eg. dataformat, file size, file name) as written to disk in physical.\n\n\n\ndata_pid <- selectMember(dp, name = \"sysmeta@fileName\", \n                         value = \"your_file_name.csv\")\n\nphysical <- arcticdatautils::pid_to_eml_physical(d1c@mn, data_pid)\n\nThe physical must then be assigned to the data object.\nNote that the above workflow only works if your data object already exists on the member node."
  },
  {
    "objectID": "edit_eml.html#set-the-project-section",
    "href": "edit_eml.html#set-the-project-section",
    "title": "Edit EML",
    "section": "Set the project section",
    "text": "Set the project section\nThe project section in an EML document is automatically filled out by the metacatUI editor. It sets the project title and project personnel to the submission’s title and creators. Most of the time at least some of this information is incorrect and we need to update it.\nStart by searching for the funding information using NSF’s award search. This will give us the project title, abstract, and personnel - along with some additional metadata.\nUsing this information we will set the title, personnel, and funding number. For NSF funded projects prepend the funding number with “NSF”. If there are multiple awards associated with one dataset then additional funding, title, and personnel elements should be added to reflect the additional awards.\ndoc$dataset$project$funding$para[[1]] <- 'NSF 1503846'\n\ndoc$dataset$project$title[[1]] <- 'Collaborative Research: Reconciling conflicting Arctic temperature and fire reconstructions using multi-proxy records from lake sediments north of the Brooks Range, Alaska\n\ndoc$dataset$project$personnel[[1]] <- eml$personnel(individualName = eml$individualName(givenName = 'Yongsong', surName = 'Huang'),\n                                                    role = 'Principal Investigator')\ndoc$dataset$project$personnel[[2]] <- eml$personnel(individualName = eml$individualName(givenName = 'James', surName = 'Russell'),\n                                                    role = 'co Principal Investigator')\nThere is also a helper function eml_nsf_to_project() that can help do the searching for you. Just verify that the information retrieved is correct.\n# update NSF awards data\nawards <- c(\"1311655\", \"1417987\", \"1417993\") # list of award numbers\nproj <- eml_nsf_to_project(awards) #helper function\n\ndoc$dataset$project <- proj\nOn the web form right now only fills in the funding field. We need instructions on how to convert that to the new awards formatting until the form is updated to include these fields:\nproject$award$funderName # required\nproject$award$title # required\nproject$award$awardNumber\nproject$award$funderIdentifier\nInformation can be found in using the Open Funder Registry. If a award title cannot be found you can use the dataset title."
  },
  {
    "objectID": "edit_eml.html#use-references",
    "href": "edit_eml.html#use-references",
    "title": "Edit EML",
    "section": "Use references",
    "text": "Use references\nReferences are a way to avoid repeating the same information multiple times in the same EML record. There are a few benefits to doing this, including:\n\nMaking it clear that two things are the same (e.g., the creator is the same person as the contact, two entities have the exact same attributes)\nReducing the size on disk of EML records with highly redundant information\nFaster read/write/validate with the R EML package\n\nYou may want to use EML references if you have the following scenarios (not exhaustive):\n\nOne person has multiple roles in the dataset (creator, contact, etc)\nOne or more entities shares all or some attributes\n\n\nExample with parties\n\n\n\n\n\n\nNote\n\n\n\nDo not use references for creators as it is used for the citation information. The creators will not show up on the top of the dataset if it is a reference. Until this issue is resolved in NCEAS/metacat#926 we will need to keep this in account.\n\n\nIt’s very common to see the contact and creator referring to the same person with XML like this:\n<eml packageId=\"my_test_doc\" system=\"my_system\" xsi:schemaLocation=\"eml://ecoinformatics.org/eml-2.1.1 eml.xsd\">\n  <dataset>\n    <creator>\n      <individualName>\n        <givenName>Bryce</givenName>\n        <surName>Mecum</surName>\n      </individualName>\n    </creator>\n    <contact>\n      <individualName>\n        <givenName>Bryce</givenName>\n        <surName>Mecum</surName>\n      </individualName>\n    </contact>\n  </dataset>\n</eml>\nSo you see those two times Bryce Mecum is referenced there? If you mean to state that Bryce Mecum is the creator and contact for the dataset, this is a good start. But with just a name, there’s some ambiguity as to whether the creator and contact are truly the same person. Using references, we can remove all doubt.\n\ndoc$dataset$creator[[1]]$id  <- \"reference_id\"\ndoc$dataset$contact <- list(references = \"reference_id\") \nprint(doc)\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<eml:eml xmlns:eml=\"eml://ecoinformatics.org/eml-2.1.1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:stmml=\"http://www.xml-cml.org/schema/stmml-1.1\" packageId=\"id\" system=\"system\" xsi:schemaLocation=\"eml://ecoinformatics.org/eml-2.1.1/ eml.xsd\">\n  <dataset>\n    <title>A Minimal Valid EML Dataset</title>\n    <creator id=\"reference_id\">\n      <individualName>\n        <givenName>Bryce</givenName>\n        <surName>Mecum</surName>\n      </individualName>\n    </creator>\n    <contact>\n      <references>reference_id</references>\n    </contact>\n  </dataset>\n</eml:eml>\n\n\n\n\n\n\nNote\n\n\n\nThe reference id needs to be unique within the EML record but doesn’t need to have meaning outside of that.\n\n\n\n\nExample with attributes\nTo use references with attributes:\n\nAdd an attribute list to a data table\nAdd a reference id for that attribute list\nUse references to add that information into the attributeLists of the other data tables\n\nFor example, if all the data tables in our data package have the same attributes, we can set the attribute list for the first one, and use references for the rest:\n\ndoc$dataset$dataTable[[1]]$attributeList <- attribute_list\ndoc$dataset$dataTable[[1]]$attributeList$id <- \"shared_attributes\" # use any unique name for your id\n\nfor (i in 2:length(doc$dataset$dataTable)) {\n  doc$dataset$dataTable[[i]]$attributeList <- list(references = \"shared_attributes\") # use the id you set above\n}"
  },
  {
    "objectID": "solr_queries.html",
    "href": "solr_queries.html",
    "title": "Solr Queries",
    "section": "",
    "text": "Solr is what’s known as an index, which helps us keep track of the data, metadata, and resource map objects stored in our metadata catalog, Metacat.\nSolr allows you to quickly search through any coordinating or member node. Some more common use-cases include:\nOnce you understand the logic of queries, it becomes a flexible and useful tool that you can integrate into your R workflow. You can use queries to answer a variety of interesting questions, for example:\nQuerying Solr is possible by adding a query onto the end of a base URL or through the dataone::query() function in R. For now, we’ll just cover the basics of Solr queries in R."
  },
  {
    "objectID": "solr_queries.html#query-solr-via-a-browser",
    "href": "solr_queries.html#query-solr-via-a-browser",
    "title": "Solr Queries",
    "section": "Query Solr via a browser",
    "text": "Query Solr via a browser\nSolr is queried via what’s called an HTTP API (Application Program Interface). Practically, what this means it that you can execute a query in your browser by tacking a query onto a base URL.\nThis is similar to the way Google handles your searches. If I search “soil science” in Google, for example, the URL becomes:\nhttps://www.google.com/search?q=soil+science&oq=soil+science&aqs=chrome.0.69i59.1350j0j1&sourceid=chrome&ie=UTF-8\nIf I break it down into pieces, I get:\n\nthe base URL - https://www.google.com/search\n?, after which the query parameters are listed\nthe query - q=soil+science\nother parameters, which are separated by & - oq=soil+science&aqs=chrome.0.69i59.1350j0j1&sourceid=chrome&ie=UTF-8\n\nMost of the time, you’ll query either the Arctic Data Center member node or the PROD coordinating node, which have the following base URLs:\n\nArctic Data Center member node: https://arcticdata.io/metacat/d1/mn/v2/query/solr\nPROD coordinating node: https://cn.dataone.org/cn/v2/query/solr\n\nYou can then append your query parameters to your base URL:\nhttps://arcticdata.io/metacat/d1/mn/v2/query/solr/?q={QUERY}&fl={FIELDS}&rows={ROWS}\n\n\n\n\n\n\nNote\n\n\n\nVisit the base URL to see a list of fields Solr is storing for the objects it indexes.\nThere is a large set of queryable fields, though not all types of objects will have values set for all of the possible fields because some fields do not make sense for some objects (e.g., title for a CSV)."
  },
  {
    "objectID": "solr_queries.html#query-solr-via-r",
    "href": "solr_queries.html#query-solr-via-r",
    "title": "Solr Queries",
    "section": "Query Solr via R",
    "text": "Query Solr via R\nThough it’s possible to query Solr directly through its HTTP API, we typically run our queries through R, for two main reasons:\n\nThe result is returned in a more useful way to R without extra work on your part\nWe can more easily pass our authentication token with the query\n\nWhy does #2 matter? Well by default, all of those URLs above only return publicly-readable Solr documents. If a private document matches any of those queries, Solr won’t tell you that. It will act like the non-public-readable documents don’t exist. So we must pass an authentication token to access non-public-readable content. This bit is crucial for working with the ADC, so you’ll very often want to use R instead of visiting those URLs in a web browser.\n\ncn <- CNode(\"PROD\")\nadc <- getMNode(cn, \"urn:node:ARCTIC\")\n# Set your token if you need/want!\n\n#string your parameters together like this: dataone::query(mn, \"q=title:*soil*&fl=title&rows=10\")\n#or alternatively, list them out:\nquery(adc, list(q=\"title:*soil*\",\n                fl=\"title\",\n                rows=\"10\"))\n\nBy default, query returns the result as a list, but a data.frame can be a more useful way to work with the result. To get a data.frame instead, just set the as argument to ‘data.frame’ to get a data.frame:\n\nquery(adc, list(q=\"title:*soil*\",\n                fl=\"title\",\n                rows=\"10\"),\n      as = \"data.frame\")"
  },
  {
    "objectID": "solr_queries.html#use-facets",
    "href": "solr_queries.html#use-facets",
    "title": "Solr Queries",
    "section": "Use facets",
    "text": "Use facets\nWe can also summarize what’s in Solr with faceting, which lets us group Solr documents together and count them. This is like table in R. Faceting can do a query within a query, but more commonly it’s used to summarize unique values in a field. For example, we can find the unique formatIds on data objects:\n\nhttps://arcticdata.io/metacat/d1/mn/v2/query/solr/?q=:&fq=formatType:DATA&facet=true&facet.field=formatId&rows=0\n\nTo facet, we usually do a few things:\n\nAdd the parameter facet=true\nAdd the parameter facet.field={FIELD} with the field we want to facet (group) on\nSet rows=0 because we don’t care about the matched Solr documents\nOptionally specify fq={expression} which filters out Solr documents before faceting. In the above example, we have to do this to count only data objects. Without it, the facet result would include formatIds for metadata and resource maps, which we don’t want.\n\n\n\n\n\n\n\nNote\n\n\n\nCurrently, the dataone::query() function does not support faceting, so you’ll have to run your queries as a URL.\nFor additional ways to use faceting (such as pivot faceting), check out the Solr documentation."
  },
  {
    "objectID": "solr_queries.html#use-stats",
    "href": "solr_queries.html#use-stats",
    "title": "Solr Queries",
    "section": "Use stats",
    "text": "Use stats\nWith stats, we can have Solr calculate statistics on numerical values (such as size).\n\nhttps://arcticdata.io/metacat/d1/mn/v2/query/solr/?q=formatType:DATA&stats=true&stats.field=size&rows=0\n\nThis query calculates a set of summary statistics for the size field on data objects that Solr has indexed. In this case, Solr’s size field indexes the size field in the system metadata for each object in Metacat."
  },
  {
    "objectID": "solr_queries.html#example-solr-queries",
    "href": "solr_queries.html#example-solr-queries",
    "title": "Solr Queries",
    "section": "Example Solr queries",
    "text": "Example Solr queries\nFor additional examples and explanations, check out the Apache Lucene Query Parser Syntax page.\n\n\n\n\nFind everything\n\nresult <- query(adc, list(q=\"*:*\",\n                               fl=\"*\",\n                               rows=\"20\"),\n                as = \"data.frame\")\n\n\n\nQuery a wildcard expression\n\n#find any id that starts with arctic-data.6\nresult <- query(adc, list(q=\"id:arctic-data.6*\",\n                               rows=\"5000\"),\n                as = \"data.frame\")\n\n\n\nQuery multiple fields\nMultiple fields can be queried at once by using either the AND or OR arguments. ::: {.cell}\nresult <- query(adc, list(q=\"title:soil*+AND+origin:Ludwig\",\n                               rows=\"5000\"),\n                as = \"data.frame\")\n:::\n\nresult <- query(adc, list(q=\"title:soil* OR origin:Ludwig\",\n                               rows=\"5000\"),\n                as = \"data.frame\")\n\n\n\n\n\n\n\nNote\n\n\n\nYou can use either spaces or + to separate query parameters. When typing queries in R, it’s often easier to read if you use spaces. However, when using the browser, you may want to use + to keep the query clean. (The browser will replace spaces with %20.)\n\n\n\n\nQuery by formatType\nObjects are queryable via their formatType which is one of DATA, METADATA, or RESOURCE.\n\nresult <- query(adc, list(q = 'formatType:RESOURCE AND submitter:\"http://orcid.org/0000-0002-2561-5840\"',\n                          fl = 'identifier,submitter,fileName',\n                          sort = 'dateUploaded+desc',\n                          rows='10'),\n                as = \"data.frame\")\n\n\nresult <- query(adc, list(q = 'formatType:METADATA AND title:*Toolik*',\n                          fl = 'identifier,submitter,fileName',\n                          sort = 'dateUploaded+desc',\n                          rows='10'),\n                as = \"data.frame\")\n\n\n\nQuery pids by a specific submitter\n\nresult <- query(adc, list(q = 'submitter:\"http://orcid.org/0000-0003-4703-1974\"',\n               fl = 'identifier,submitter,fileName, size',\n               sort = 'dateUploaded+desc',\n               rows='1000'),\n      as = \"data.frame\")\n\n\n\nQuery pids with special characters\n\n# Wrap the pid with special characters with escaped backslashes\ndataone::query(adc, list(q = paste0('id:', '\\\"', 'doi:10.18739/A20R9M36V', '\\\"'),\n                         fl = 'dateUploaded AND identifier',\n                         rows = 5000),\n               as = \"data.frame\")\n\n\n\nQuery multiple conditions within one field\n\nresult <- query(adc, list(q=\"title:(soil* AND carbo*)\",\n                               rows=\"5000\"),\n                as = \"data.frame\") \n\n\n\nQuery for latest versions only\n\nresult <- query(adc, list(q = \"rightsHolder:*orcid.org/0000-000X-XXXX-XXXX* AND (*:* NOT obsoletedBy:*)\",\n                          fl = \"identifier,rightsHolder,formatId\",\n                          start =\"0\",\n                          rows = \"1500\"),\n                     as=\"data.frame\")\n\n\n\nUse NOT in a query\nJust add - before a query parameter!\n\nresult <- query(adc, list(q=\"title:(soil AND -carbon)\",\n                               rows=\"5000\"),\n                as = \"data.frame\")\n\n\n\nQuery a coordinating node\n\nresult <- query(cn, list(q=\"title:soil* AND origin:Ludwig\",\n                              rows=\"5000\"),\n                as = \"data.frame\")\n\n\n\nQuery for EMLs that document a specific data pid\n\n# Wrap the pid in escaped quotation marks if it contains special characters \nquery(adc, list(q = paste0('documents:', '\\\"', 'urn:uuid:f551460b-ce36-4dd3-aaa6-3a6c6e338ec9', '\\\"'),\n                fl = \"identifier\",\n                rows=\"20\"),\n      as = \"data.frame\")\n\n# Alternatively we can use a wildcard expression in place of \"urn:uuid:\"\n# This way we don't need to escape the colon special characters \nquery(adc, list(q = paste0(\"documents:*f551460b-ce36-4dd3-aaa6-3a6c6e338ec9\"),\n                fl = \"identifier\",\n                rows=\"20\"),\n      as = \"data.frame\")\n\n\n\nQuery for files uploaded during a specific time\n\nquery(adc, list(q=\"dateUploaded:[2020-05-06T00:00:00Z TO NOW]\",\n                fl=\"title,identifier,resourceMap,dateUploaded,dateModified\",\n                sort = \"dateUploaded+desc\",\n                rows=\"200\"), \n      as = \"data.frame\")\n\n\n\nUse facets\nAll resource maps with > 100 data objects that are not on the Arctic Data Center:\n\nhttps://cn.dataone.org/cn/v2/query/solr/?q=resourceMap:*+AND+-datasource:*ARCTIC*&rows=0&facet=true&facet.field=resourceMap&facet.mincount=100"
  },
  {
    "objectID": "solr_queries.html#more-resources",
    "href": "solr_queries.html#more-resources",
    "title": "Solr Queries",
    "section": "More resources",
    "text": "More resources\n\nSolr’s The Standard Query Parser docs (high level of detail)\nAnother quick reference: https://wiki.apache.org/solr/SolrQuerySyntax\nhttp://www.solrtutorial.com/"
  },
  {
    "objectID": "adc_web_submissions.html",
    "href": "adc_web_submissions.html",
    "title": "ADC Web Submissions",
    "section": "",
    "text": "New submissions made through the web editor will not have any physical sections within the otherEntitys. Add them to the EML with the following script:\n\nfor (i in seq_along(doc$dataset$otherEntity)) {\n    otherEntity <- doc$dataset$otherEntity[[i]]\n    id <- otherEntity$id\n    \n    if (!grepl(\"urn-uuid-\", id)) {\n        warning(\"otherEntity \", i, \" is not a pid\")\n        \n    } else {\n        id <- gsub(\"urn-uuid-\", \"urn:uuid:\", id)\n        physical <- arcticdatautils::pid_to_eml_physical(mn, id)\n        doc$dataset$otherEntity[[i]]$physical <- physical\n    }\n}\n\nAs you can see from code above, we use a for loop here to add physical sections. The for loop is a very useful tool to iterate over a list of elements. With for loop, you can repeat a specific block of code without copying and pasting the code over and over again. When processing datasets in Arctic Data Center, there are many places where for loop can be used, such as publishing a bunch of objects with pids, updating formatID for pkg$data, adding physical section like above code, etc.\nA loop is composed of two parts: the sequence and the body. The sequence usually generates indices to locate elements and the body contains the code that you want to iterate for each element.\nHere is an example of adding the same attributeList for all the dataTables in the metadata using for loop. ::: {.cell}\nattributes <- read.csv('attributes.csv')  # attribute table in csv format\nattributeList <- EML::set_attributes(attributes = attributes)\n\nfor (i in 1:length(doc$dataset$dataTable)) { # sequence part\n    doc$dataset$dataTable[[i]]$attributeList <- attributeList # body part\n}\n:::"
  },
  {
    "objectID": "adc_web_submissions.html#assess-attributes",
    "href": "adc_web_submissions.html#assess-attributes",
    "title": "ADC Web Submissions",
    "section": "Assess attributes",
    "text": "Assess attributes\nNew submissions made through the web editor should have attributes created by the submitter. If there are no attributes, or if they are incomplete, please use the email template to correspond with the submitter to ask for attributes.\nAdditionally, the web editor will not allow for the creation of custom units. submitters should select other/none in the editor unit dropdown if they cannot find their desired unit. In the EML document, these will result in dimensionless units. Accordingly, new submissions should be checked for dimensionless units. This can be done with the following code. Note that this only applies if there is more than one otherEntity.\n\ndim_units <- sapply(doc$dataset$otherEntity, function(x) {\n      i <- datamgmt::which_in_eml(x$attributeList$attribute, \"standardUnit\", as(\"dimensionless\", \"standardUnit\"))\n      \n      out <- sapply(i, function(j){\n         list(entityName = x$entityName,\n               attributeName = x$attributeList$attribute[[j]]$attributeName,\n               attributeLabel = x$attributeList$attribute[[j]]$attributeLabel,\n               attributeDefinition = x$attributeList$attribute[[j]]$attributeDefinition)\n      })\n      \n  return(out)  \n})\ndim_units <- data.frame(t(do.call(cbind, dim_units)))\n\ndim_units\n\nIf dimensionless units are found, first check the attributeDefinition, attributeLabel, and attributeName to see if dimensionless seems to be an appropriate unit for the attribute. If there is any question about whether or not dimensionless seems appropriate, ask another member of the data team. If there is still any question about what the unit should be, reach out to the submitter and ask for clarification."
  },
  {
    "objectID": "adc_web_submissions.html#list-submissions-to-the-arctic-data-center",
    "href": "adc_web_submissions.html#list-submissions-to-the-arctic-data-center",
    "title": "ADC Web Submissions",
    "section": "List submissions to the Arctic Data Center",
    "text": "List submissions to the Arctic Data Center\nIf the arctic bot fails to pick up a new submission, due to an invalid token or another error, we can check for submissions using a solr query. The list_submissions() function in the arcticdatautils package is a convenience wrapper around the solr query. If the function doesn’t specifically fit your needs it’s fairly straight-forward to modify the source code. Note: the function can be applied to any node, although it filters out results if the submitter is in the Arctic Data Center Admins group. Refer to the function documentation for more information.\n\nView submissions to the Arctic Data Center from 10/1/18 to 10/7/18 ::: {.cell}\n\ncn <- dataone::CNode('PROD')\nadc <- dataone::getMNode(cn,'urn:node:ARCTIC')\nView(arcticdatautils::list_submissions(adc, '2018-10-01', '2018-10-07'))\n:::\n\nThe following code shows the underlying solr query ::: {.cell}\n\n  q = paste0('dateUploaded:[\"2018-10-01T00:00:00Z\" TO \"2018-10-08T00:00:00Z\"] AND formatType:*')\n  results <- dataone::query(adc, list(q = q,\n                                     fl = \"identifier AND submitter AND dateUploaded AND formatType AND fileName\",\n                                     rows = 10000),\n                            as = \"data.frame\")\n:::"
  },
  {
    "objectID": "adc_web_submissions.html#recover-failed-submissions",
    "href": "adc_web_submissions.html#recover-failed-submissions",
    "title": "ADC Web Submissions",
    "section": "Recover failed submissions",
    "text": "Recover failed submissions\nA submission may result in an error when the EML cannot be validated through EML::eml_validate, preventing it from being written to an indicated path. This usually occurs when the metacatUI detects a submission error and uploads the EML as a data object instead of text. When this happens, arcticdatautils::recover_failed_submission can be used to retrieve the original EML file. The function removes the error message to get a valid EML document.\nFor the example below, pid is the metadata pid containing the failed submission. The path parameter indicates where you want to write the recovered EML version to on your server’s local working directory.\n\npath <- \"path/to/save/eml.xml\"\n\npid <- \"your_metadata_pid\"\n\narcticdatautils::recover_failed_submission(adc, pid, path)\n\nThe output of this function is a valid EML file written to your chosen path. After recovering the document, make sure to set the rights and access to the correct submitter.\nNote that arcticdatautils::recover_failed_submission may not always work. Its functionality depends on the error message since they can vary."
  },
  {
    "objectID": "data_portals.html",
    "href": "data_portals.html",
    "title": "Data Portals",
    "section": "",
    "text": "Create a custom, branded portal for your research topic or lab group that spans datasets in the Arctic Data Center – available for all users. Branded portals provide a convenient, readily customized way to communicate your science, your team, your data, and related data from within the Arctic Data Center. The portals feature makes highlighting and sharing related datasets easy for researchers.\n\nGeneral information on data portals can be found on the main page: https://arcticdata.io/data-portals/\n\n\nMy portals allows members of the Arctic Data Center Team to view all the portals currently created. This can be found in Settings under the My Portals section.\n\n\n\nUseful search terms to use:\n\nNSF award number\nGeographic Region\nKeywords\nAccess permissions\n\n### Set Access Permissions For some portals such as PerCS portal, will need to be added by running set_access(). Please see the specific portal for the exact arguments to pass.\n\n\n\nThese requires the manual update of the portal document for features that are not available on the website yet. Please ask Jeanette for more assistance. For an example of a portal with all the features, see the SASAP Portal.\n\n\n\nMost os the time copy and pasting desired from the SASAP portal is a good place to start\nTips - try to collapse the specific section and copy that to make sure you copy everything is needed\n\nFilter Groups\nGrouping multiple filters under one tab\n\nPossible fontawesome icons\n\n<filterGroup>\n  <label>MOSAiC Terms</label>\n  <description>Terms in the MOSAiC ontology</description>\n  <icon>book</icon>\n  <choiceFilter>...</choiceFilter>\n</filterGroup>\nIndividual Filters\n<choiceFilter>\n  <label>Campaign</label>\n  <!-- ====== equivalent to the fields available in the solr query ====== -->\n  <field>text</field> \n  <operator>OR</operator>\n  <filterOptions>\n      <placeholder>Choose a campaign</placeholder><icon>sitemap</icon>\n      <description>The campaign number</description>\n  </filterOptions>\n  <!-- ====== change these for different options ====== -->\n      <choice><label>AF-MOSAiC-1</label><value>https://purl.dataone.org/odo/MOSAIC_00000020</value></choice> \n      <choice><label>AT-MOSAiC-1</label><value>https://purl.dataone.org/odo/MOSAIC_00011201</value></choice>\n      <chooseMultiple>true</chooseMultiple>\n</choiceFilter>\n\n\n\nLook for this section in the xml and replace the hex codes:\n <option>\n        <optionName>primaryColor</optionName>\n        <optionValue>#3774b9</optionValue>\n    </option>\n    <option>\n        <optionName>secondaryColor</optionName>\n        <optionValue>#82cdf5</optionValue>\n    </option>\n    <option>\n        <optionName>accentColor</optionName>\n        <optionValue>#EB5638</optionValue>\n    </option>\n\n\n\n\nalso a formatted page - see the SASAP portal for details\n\n\n\n\n\nFor portals on DataOne - use the ucsb node. Portals made on the ADC use the same node as the datasets. ::: {.cell}\nlibrary(dataone)\nlibrary(EML)\n\ncn <- CNode(\"PROD\")\nucsb <- getMNode(cn, \"urn:node:mnUCSB1\")\n:::\nLook for portals using query()so you can get the appropriate seriesID ::: {.cell}\ndf <- query(ucsb, list(q =\"formatId:*purl.dataone.org/portals-1.0.0 AND (*:* NOT obsoletedBy:*)\",\n                       rows = \"300\",\n                       fl = \"identifier,dateUploaded,formatId,obsoletedBy,origin,formatType,title, seriesId\",\n                       sort = 'dateUploaded+desc'),\n            as = \"data.frame\")\n:::\nDownload the file and open to edit and add the filters and other options. ::: {.cell}\nid <- df[df$title == \"Multidisciplinary drifting Observatory for the Study of Arctic Climate expedition\", 2] #series ID\nwriteBin(getObject(ucsb, id), \"file_mosaic.xml\") #download\n:::\nMake whatever edits you need and upload the file. The identifier should be updated if successful but if there is an issue with the xml document go back and fix the issue before re-uploading again. ::: {.cell}\nsys <- getSystemMetadata(ucsb,  id)\narcticdatautils::update_object(ucsb, sys@identifier, path = \"file_mosaic.xml\", format_id = sys@formatId, sid = sys@seriesId)\n:::"
  },
  {
    "objectID": "data_portals.html#distributed-biological-observatory-dbo-submissions",
    "href": "data_portals.html#distributed-biological-observatory-dbo-submissions",
    "title": "Data Portals",
    "section": "Distributed Biological Observatory (DBO) submissions",
    "text": "Distributed Biological Observatory (DBO) submissions\nDBO packages are organized under a project page (viewable here). In order to make sure that DBO datasets appear in the special DBO data search correctly, there are a few additional metadata requirements.\n\ngive read and write access to the entire data package (using set_access) to the group: \"CN=DBO,DC=dataone,DC=org\"\n\neg: `set_access(mn, pkg, “CN=DBO,DC=dataone,DC=org”, permissions = c(“read”, “write”, “changePermission”))\n\nensure that the name of the ship the data was collected from appears in the metadata record. This will likely be one of the following ship names. If the ship name is not in that list, let Jeanette or Dominic know\n\nAnnika Marie\nFairweather\nHealy\nKromov\nMirai\nOscar Dyson\nOshoro-Maru\nSir Wilfrid Laurier\nWestward Wind\nXue Long\n\nthe geographic coverage should be one coverage per DBO transect sampled. The geographicDescription and bounding coordinates should be from the controlled vocabulary given in the code snippet below, which will create a data.frame with these values in your R environment\n\n\ngeo_locs <- dplyr::tribble(~siteNew, ~westBoundingCoordinate, ~eastBoundingCoordinate, ~northBoundingCoordinate,~ southBoundingCoordinate,\n\"DBO 1 - South of St. Lawrence Island, Bering Sea\", -176.147,   -172.187,   63.769, 61.847,\n\"DBO 2 - Chirikov Basin, Northern Bering Sea\",  -170.492,   -167.86,    65.111, 64.482,\n\"DBO 3 - Southern Chukchi Sea\", -171.419,   -166.481,   68.609, 66.752,\n\"DBO 4 - Northeast Chukchi Sea\",    -164.553,   -160.507,   71.867, 70.682,\n\"DBO 5 - Barrow Canyon, Chukchi Sea\",   -158.848,   -155.931,   71.808, 71.111,\n\"DBO 6 - Beaufort Sea - 152 W\", -153.865,   -150.976,   72.119, 70.89)\n\n\none of the following key phrases referencing the data type should exist in the dataset. If the dataset doesn’t seem to fit in one of these categories, ask Jeanette or Dominic\n\nADCP\nbenthic macroinfaunal\nchlorophyll\nCTD\nCPUE (referencing fish catch per unit effort)\nmarine mammal\nnutrient\nsediment\nzooplankton\n\n\nAfter you have updated your dataset, navigate to https://arcticdata.io/catalog/projects/DBO/data and make sure that the different filters work as expected. Your dataset should be discoverable in some way through all of the filters."
  },
  {
    "objectID": "data_portals.html#mosaic",
    "href": "data_portals.html#mosaic",
    "title": "Data Portals",
    "section": "MOSAiC",
    "text": "MOSAiC\nLook out for datasets that are part of the MOSAiC expedition from 2019 -2020. There are a couple of special steps for datasets from this project.\nWhen working on MOSAiC datasets:\n\nFind out the EventId from the researcher to annotate (Campaign can be derived from the eventLabel). Ask for it in your email:\n\n\nWe would like to ask for the event label associated with this dataset (see https://www.pangaea.de/expeditions/events/PS122%2F4).\n\n\nFind the appropriate dataset and attribute level annotations\n\n\nThere are functions in arcticdatautils to help with annotating: mosaic_annotate_dataset and mosaic_annotate_attribute\nThe custom ontology for the datasets are currently in the sem-prov-ontologies repository but you won’t need to use it directly if the function works.\nUse EML::shiny_attributes only when no annotations have been added. The function does not work well with multiple annotations\nPlease continue to annotate the measurement types using containst measurements of type for all other attributes\n\n\nThe portal is on DataONE. Make sure the dataset(s) show up in the portal after you add the annotations.\n\nHere are two fully annotated datasets for reference:\n\nSimple example\nExample with MOSAiC and ECSO annotations\nExample with non-polarstern vessels\n\nThe following shows how to add the annotations using arcticdatautils and manually in the case the functions fail to work:\n\nDataset Level Annotations\nThere are 5 main campaigns in the MOSAiC expedition. The main campaigns follow the pattern PS122/#. For the full campaign list it is easiest to see on the PANGAEA website\narcticdatautils ::: {.cell}\ndoc$dataset$id <- \"your id here\"\ndoc$dataset$annotation <- NULL #make sure it is empty\n\ndoc$dataset$annotation <- mosaic_annotate_dataset(c(\"PS122/1\", \"PS122/2\"))\n:::\nManual\nMajority of the annotations will be the same across all of the datasets. Pay attention to what needs to be changed for the hasBasis and isPartOfCampaign valueURIs.\nMore than one Campaign and Basis might be needed in rare cases.\n\ndoc$dataset$id <- \"your id here\"\ndoc$dataset$annotation <- NULL #make sure it is empty here\n\ndoc$dataset$annotation <- list(\n  #Basis\n  list(\n    propertyURI = list(label = \"hasBasis\",\n                       propertyURI = \"https://purl.dataone.org/odo/MOSAIC_00000034\"),\n    valueURI = list(label = \"Polarstern\", # this depends on your event ID, most of them should be Polarstern\n                    valueURI = \"https://purl.dataone.org/odo/MOSAIC_00000030\")\n  ),\n  #Project\n  list(\n    propertyURI = list(label = \"hasProjectLabel\",\n                       propertyURI = \"https://purl.dataone.org/odo/MOSAIC_00000025\"),\n    valueURI = list(label = \"MOSAiC20192020\",\n                    valueURI = \"https://purl.dataone.org/odo/MOSAIC_00000023\")\n  ),\n  #Campaign\n  list(\n    propertyURI = list(label = \"isPartOfCampaign\",\n                       propertyURI = \"https://purl.dataone.org/odo/MOSAIC_00000032\"),\n    valueURI = list(label = \"PS122/2\", #*** this changes depending on the campaign\n                    valueURI = \"https://purl.dataone.org/odo/MOSAIC_00000018\")\n  ) #*** this changes depending on the campaign\n)\n\n\nAttribute Level Annotations\nApply these to the attribute level of the dataset. Event IDs should have already be identified earlier on in the dataset review. Check the ticket overview for details.\narcticdatautils\n\ndoc$dataset$dataTable[[1]]$attributeList$attribute[[1]]$id <- \"some id here\"\ndoc$dataset$dataTable[[1]]$attributeList$attribute[[1]]$annotation <- mosaic_annotate_attribute(\"PS122/2_14-270\")\n\nManual ::: {.cell}\nevent_annotation <- list(#Event Label\n  list(\n    propertyURI = list(label = \"wasGeneratedBy\",\n                       propertyURI = \"http://www.w3.org/ns/prov#wasGeneratedBy\"),\n    valueURI = list(label = \"PS122/2_14-270\",\n                    valueURI = \"https://purl.dataone.org/odo/MOSAIC_00004550\")\n  ),\n  #Method/Device - Use the long name!\n  list(\n    propertyURI = list(label = \"deployedSystem\",\n                       propertyURI = \"https://purl.dataone.org/odo/MOSAIC_00002201\"),\n    valueURI = list(label = \"Ultra-Wideband Software-defined Microwave Radiometer (0.5-2GHZ)\",\n                    valueURI = \"https://purl.dataone.org/odo/MOSAIC_00001163\")\n  ))\n\ndoc$dataset$dataTable$attributeList$attribute[[1]]$id <- \"eventId\"\ndoc$dataset$dataTable$attributeList$attribute[[1]]$annotation <-\n  event_annotate\n:::\nAdding annotations\nIf there are already annotations applied (ie. using ECSO), the MOSAiC annotations can be added as so:\n\nget the index of all of the attributes we want to add this annotation ::: {.cell}\n\nn <- which(stringr::str_detect(eml_get_simple(doc$dataset$dataTable$attributeList, \"attributeName\"),\"Brightness\"))\n:::\n\nloop through and add the annotation(s) ::: {.cell}\n\nfor(i in n) {\n  doc$dataset$dataTable$attributeList$attribute[[i]]$annotation <-\n    append(\n      list(\n        doc$dataset$dataTable$attributeList$attribute[[i]]$annotation\n      ),\n      event_annotation\n    )\n}\n:::\n\n\n\nPortal updates\nThe filters are based on the MOSAiC ontology. The Campaign and Basis filters should remain relatively the same. However there are over 500 Method and Devices. So the decision was made to only show the ones we have annotated.\nWe can query for all of them and output them formatted as a choice:\n\nmosaic_portal_filter(\"Method/Device\")\n\nThen update the portal document using the steps outlines in the advanced data portal customizations"
  },
  {
    "objectID": "data_packages_arcticdatautils.html",
    "href": "data_packages_arcticdatautils.html",
    "title": "Using arcticdatautils",
    "section": "",
    "text": "Please use datapack and dataone for regular data processing. This information is kept for troubleshooting and legacy purposes."
  },
  {
    "objectID": "data_packages_arcticdatautils.html#get-package-and-eml",
    "href": "data_packages_arcticdatautils.html#get-package-and-eml",
    "title": "Using arcticdatautils",
    "section": "Get package and EML",
    "text": "Get package and EML\nBefore we look more in depth at EML, we first need to load your data package into R. After setting your node, use the following commands to load the package:\n\nrm_pid <- \"your_resource_map_pid\"\n\npkg <- get_package(adc_test,\n                   rm_pid,\n                   file_names = TRUE)\n\n\n\n\n\n\n\nNote\n\n\n\nKeeping track of PIDs\nIn all subsequent sections, if they ask for the pid of the metadata, reasource map or data you can refer to the object from get_package().\nFor example, if you assigned the value from get_package() as above as pkg then you can refer to the following by using the corresponding commands:\n\n\n\nmetadata_pid <-  pkg$metadata\ndata_pid <-  pkg$data\nresource_pid <-  pkg$resource_map\n\nAfter loading the package, you can also load the EML file into R using the following command:\n\ndoc <- read_eml(getObject(adc_test, pkg$metadata))\n\nNote that we named the object doc. This is a good generic name to use for EML documents. The generic name eml should not be used - as the EML package ships with an eml function, which can cause namespace issues in your environment if you have an object also called eml.\n\n\n\n\n\n\nNote\n\n\n\nTip to always have the most recent resource map.\nWhen editing data packages, you always want to be working with the most recent update. To ensure you have the most recent resource map, you can use the following commands:\nrm_pid_original <- \"your_original_resource_map_pid\"\nall_rm_versions <- get_all_versions(adc_test, rm_pid_original)\nrm_pid <- all_rm_versions[length(all_rm_versions)]\nprint(rm_pid)"
  },
  {
    "objectID": "data_packages_arcticdatautils.html#publish-an-object",
    "href": "data_packages_arcticdatautils.html#publish-an-object",
    "title": "Using arcticdatautils",
    "section": "Publish an object",
    "text": "Publish an object\nObjects (data files, xml metadata files) can be published to a DataONE node using the function publish_object() from the arcticdatautils R Package. To publish an object, you must first get the formatId of the object you want to publish. A few common formatIds are listed below.\n\n# .csv file\nformatId <- \"text/csv\"\n\n# .txt file\nformatId <- \"text/plain\"\n\n# metadata file\nformatId <- \"https://eml.ecoinformatics.org/eml-2.2.0\"\n# OR\nformatId <- format_eml(\"2.2.0\")\n\nMost objects have registered formatIds that can be found on the DataONE Object Format List here. Always use the “Id:” (2nd line) from the DataONE Object Format List and ensure it is copied EXACTLY. Metadata files (as shown above) use a special function to set the formatId. If the formatId is not listed at the DataONE website, you can set formatId <- \"application/octet-stream\".\n\n\n\n\n\n\nNote\n\n\n\nIf you want to change the formatId please use updateSystemMetadata instead.\n\n\nOnce you know the appropriate formatId you can publish an object using these commands:\n\npath <- \"path/to/your/file\"\nformatId <- \"your/formatId\"\n\npid <- publish_object(adc_test,\n                      path = path,\n                      format_id = formatId) # note that the output of this function is the PID of the newly published object\n\nAfter publishing the object, the PID will need to be added to a resource map by updating or creating a resource map. Additionally, the rights and access for the object must be set. However, you only need to give other people rights and access to objects to objects that are not yours, for the training you don’t need to do this."
  },
  {
    "objectID": "data_packages_arcticdatautils.html#reorder-entities",
    "href": "data_packages_arcticdatautils.html#reorder-entities",
    "title": "Using arcticdatautils",
    "section": "Reorder entities",
    "text": "Reorder entities\nThis is easier to accomplish using arcticdatautils\nAn example reorganizing alphabetically\n\nMetadata\n\n\ndoc$dataset$otherEntity <- doc$dataset$otherEntity[order(entity_names)]\n\n\nData files\n\n\npkg <- get_package(adc, rm, file_names = T)\ndoc <- EML::read_eml(getObject(adc, pkg$metadata))\nreordered <- arcticdatautils::reorder_pids(pkg$data, doc)"
  },
  {
    "objectID": "nesting_data.html",
    "href": "nesting_data.html",
    "title": "Nesting Data",
    "section": "",
    "text": "Data packages on member nodes can exist as independent packages or in groups (nested data packages). Much like we can group multiple data files together with a common metadata file, we can group related data packages together with a common “parent” data package.\nThe structure of nested data packages resembles a pyramid. There is one top level, or “parent”, with one or more data packages, or “child packages”, nested beneath it. There is no limit to how many nested levels can be created, but packages do not generally exceed 3 levels. This “grandparent” has 5 child packages (nested datasets), all of which have child packages of their own.\nHere are some common uses for nesting:\n\ncollected data vary by year\nan NSF award funds several related projects\ndata collection is still ongoing\ndata files exceed the 1000 file limit per data package"
  },
  {
    "objectID": "nesting_data.html#add-children-to-an-existing-parent",
    "href": "nesting_data.html#add-children-to-an-existing-parent",
    "title": "Nesting Data",
    "section": "Add children to an existing parent",
    "text": "Add children to an existing parent\nA new package is published with a DOI and needs to be nested underneath a pre-existing parent. Nest the new child using the child_pids argument in publish_update().\n\nresource_map_child_new <- \"some_child_resource_map_pid\"\npkg_parent <- get_package(mn, 'resource_map_parent')\n\npublish_update(mn,\n               resource_map_pid = pkg_parent$resource_map,\n               metadata_pid = pkg_parent$metadata,\n               data_pids = pkg_parent$data_pids,  # parents usually don't contain data, but better to be safe\n               child_pids = c(pkg_parent$child_packages, \n                              resource_map_child_new))\n# include the resource map PIDs of ALL the childs* in the `child_pids` argument, otherwise the nesting relationships between any omitted childs and the parent will be deleted\n\n\n\n\n\n\n\nWarning\n\n\n\nCheck through all arguments carefully before you publish to production! Do you need to update the metadata? Does the parent include data objects? Does the parent have a parent?\nParents can be tricky to fix and work with (especially if they have serial identifiers (SIDs)), so if you’re not sure how something works, try it on a test node."
  },
  {
    "objectID": "nesting_data.html#create-a-new-parent-package",
    "href": "nesting_data.html#create-a-new-parent-package",
    "title": "Nesting Data",
    "section": "Create a new parent package",
    "text": "Create a new parent package\nIn some cases, a parent package already exists. Search the ADC for the NSF award number to see if there are already exisiting packages. Parents usually have a UUID rather than a DOI and often start with a title like “Collaborative research:”, but not always. More typically, you will need to create a new parent by editing the existing metadata. The parent package should contain a generalized summary for the metadata of each of its childs.\nTo create a new parent, you will need to:\n\nCreate parent metadata. It’s often easiest to start with a child’s metadata and generalize them.\n\nAbstract/title: Remove dates and other details that are specific to the child package. Sometimes the NSF award abstract/ title will work.\nData tables/other entities: Generally, top-level parents do not include data objects, so these sections can be removed.\nGeographic coverage: Expand to include geographic coverage of all childs, if needed.\nTemporal coverage: Expand to include temporal ranges of all childs, if needed. If the study is ongoing, include the most recent end date; the parent can be updated when additional childs are added.\nMethods: Often not needed, but may be included if all childs use the same methods.\n\nPublish the parent metadata to the member node (ADC) using publish_object().\nCreate a resource map to link the parent and childs together using create_resource_map() and the child_pids argument.\n\n\n\n\n\n\n\nWarning\n\n\n\nMake sure you use the childs’ resource map PIDs when you create the resource map! If you forgot to do so, consult Jeanette for help fixing it."
  },
  {
    "objectID": "nesting_data.html#example",
    "href": "nesting_data.html#example",
    "title": "Nesting Data",
    "section": "Example",
    "text": "Example\nWe can start by creating two data packages on the test node to nest beneath a parent. These data packages contain measurements taken from Lake E1 in Alaska in 2013 and 2014.\nFirst, load the Arctic Data Center Test Node and libraries.\n\nlibrary(dataone)\nlibrary(arcticdatautils)\nlibrary(EML)\n\ncn_staging <- CNode('STAGING')\nadc_test <- getMNode(cn_staging,'urn:node:mnTestARCTIC')\n\ncn <- CNode('PROD')\nadc <- getMNode(cn, 'urn:node:ARCTIC')\n\nWe will re-create the following parent package: https://arcticdata.io/catalog/#view/urn:uuid:799b7a86-cb1c-497c-a05a-d73492915cad on the test node with two of its children. First we will copy two of the children to the test node, make sure your token for the test node is not expired.\n\nfrom <- dataone::D1Client(\"PROD\", \"urn:node:ARCTIC\")\nto <- dataone::D1Client(\"STAGING\", \"urn:node:mnTestARCTIC\")\n\nchild_pkg_1 <- datamgmt::clone_package('resource_map_doi:10.18739/A2KS1R',\n                                       from = from, to = to,\n                                       add_access_to = arcticdatautils:::get_token_subject(),\n                                       change_auth_node = TRUE, new_pid = TRUE)\n\nchild_pkg_2 <- datamgmt::clone_package('resource_map_doi:10.18739/A2QK29',\n                                       from = from, to = to,\n                                       add_access_to = arcticdatautils:::get_token_subject(),\n                                       change_auth_node = TRUE, new_pid = TRUE)\n\nThese two packages correspond to data from the same study, varying only by year; however, they currently exist on the test node as independent entities. We will associate them with each other by nesting them underneath a parent.\nNow, let’s create a parent metadata file. Read in one of the childs’ metadata files (EML). We can download object from a node in binary format using dataone::getObject(). Once it’s downloaded we just need to convert to it to the proper format: in this case to EML format using EML::read_eml().\n\ndoc_parent <- read_eml(getObject(adc_test, child_pkg_1$metadata))\n\n\n## View the title \ndoc_parent$dataset$title\n\nThe title of this child contains “2012-2013”. This is too specific for the parent, as the temporal range of both childs is 2012-2014. The parent should encompass this larger time range.\n\ndoc_parent$dataset$title <- 'Time series of water temperature, specific conductance, and oxygen from Lake E1, North Slope, Alaska, 2012-2014'\n\nLike the title, the temporal coverage elements in this EML need to be adjusted.\n\nnew_end_date <- \"2014-09-20\"\ndoc_parent$dataset$coverage$temporalCoverage$rangeOfDates$endDate$calendarDate <- new_end_date\n\nRemove dataTables and otherEntitys from the metadata. If you recall from previous chapters, dataTables contain metadata associated with data files (generally CSVs) and otherEntitys contain metadata about any other files in the data package (for instance a README or coding script). Because the parent does not contain any data objects, we want to remove dataTables and otherEntitys from the metdata file. In this instance, the E1 2013 metadata only contain dataTables. We can remove these by setting the dataTable element in the EML to a new blank object.\n\ndoc_parent$dataset$dataTable <- NULL\n\nIn this case, the abstract, contacts, creators, geographicDescription, and methods are already generalized and do not require changes.\nBefore writing your parent EML make sure that it validates. This is just a check to make sure everything is in the correct format.\n\neml_validate(doc_parent)\n\nAfter your EML validates we need to save, or “write”, it as a new file. Write your parent EML to a directory in your home folder. You can view this process like using “Save as” in Microsoft Word. We opened a file (“E1_2013.xml”), made some changes, and “saved it as” a new file called “doc_parent.xml”.\n\n# We can save the eml in a temporary file \neml_path <- file.path(tempdir(), 'science_metadata.xml')\nwrite_eml(doc_parent, path)\n\nNext, we will publish the parent metadata to the test node.\n\nmetadata_parent <- publish_object(adc_test, \n                                  path = eml_path, \n                                  format_id = format_eml())\n\nFinally, we create a resource map for the parent package. We nest the two child data packages using the child_pids argument in create_resource_map(). Note that these child_pids are PIDs for the resource maps of the child packages, NOT the metadata PIDs.\n\nresource_map_parent <- create_resource_map(adc_test, \n                                           metadata_pid = metadata_parent,\n                                           child_pids = c(child_pkg_1$resource_map,\n                                                          child_pkg_2$resource_map))\n\nThe child packages are now nested underneath the parent."
  },
  {
    "objectID": "explore_eml.html",
    "href": "explore_eml.html",
    "title": "Explore EML",
    "section": "",
    "text": "The eml_get() function is a powerful tool for exploring EML (more on that here ). It takes any chunk of EML and returns all instances of the element you specify. Note: you’ll have to specify the element of interest exactly, according to the spelling/capitalization conventions used in EML. Here are some examples:\n\ndoc <- read_eml(system.file(\"example-eml.xml\", package = \"arcticdatautils\"))\neml_get(doc, \"creator\")\n\nindividualName:\n  givenName: Bryce\n  surName: Mecum\norganizationName: National Center for Ecological Analysis and Synthesis\n\neml_get(doc, \"boundingCoordinates\")\n\neastBoundingCoordinate: '-134'\nnorthBoundingCoordinate: '59'\nsouthBoundingCoordinate: '57'\nwestBoundingCoordinate: '-135'\n\neml_get(doc, \"url\")\n\n'':\n  function: download\n  url: ecogrid://knb/urn:uuid:89bec5d0-26db-48ac-ae54-e1b4c999c456\n'': ecogrid://knb/urn:uuid:89bec5d0-26db-48ac-ae54-e1b4c999c456\neml_get_simple() is a simplified alternative to eml_get() that produces a list of the desired EML element.\n\neml_get_simple(doc$dataset$otherEntity, \"entityName\")\n\nTo find an eml element you can use either a combination of which_in_emlfrom the arcticdatautils package or eml_get_simple and which to find the index in an EML list. Use which ever workflow you see fit.\nAn example question you may have: Which creators have a surName “Mecum”?\nExample using which_in_eml:\n\nn <- which_in_eml(doc$dataset$creator, \"surName\", \"Mecum\")\n# Answer: doc$dataset$creator[[n]]\n\nExample using eml_get_simple and which:\n\nent_names <- eml_get_simple(doc$dataset$creator, \"surName\")\ni <- which(ent_names == \"Mecum\")\n# Answer: doc$dataset$creator[[i]]"
  },
  {
    "objectID": "explore_eml.html#navigate-through-eml",
    "href": "explore_eml.html#navigate-through-eml",
    "title": "Explore EML",
    "section": "Navigate through EML",
    "text": "Navigate through EML\nThe first task when editing an EML file is navigating the EML file. An EML file is organized in a structure that contains many lists nested within other lists. The function View allows you to get a crude view of an EML file in the viewer. It can be useful for exploring the file.\n\n\n\n\n# Need to be in this member node to explore file\nd1c_test <- dataone::D1Client(\"STAGING\", \"urn:node:mnTestARCTIC\")\n\ndoc <- read_eml(getObject(d1c_test@mn, \n                          \"urn:uuid:558eabf1-1e91-4881-8ba3-ef8684d8f6a1\"))\n\n\nView(doc)\n\n\nThe complex EML document is represented in R as as series of named, nested lists. We use lists all the time in R! A data.frame is one example of a special kind of list that we use all the time. You may be familiar with the syntax dataframe$column_name which allows us to select a particular column of a data.frame. Under the hood, a data.frame is a named list of vectors with the same length. You select one of those vectors using the $ operator, which is called the “list selector operator.”\nJust like you navigate in a data.frame, you can use the $ operator to navigate through the EML structure. The $ operator allows you to go deeper into the EML structure and to see what elements are nested within other elements. However, you have to tell R where you want to go in the structure when you use the $ symbol. For example, if you want to view the dataset element of your EML you would use the command doc$dataset. If you want to view the creators of your data set you would use doc$dataset$creator. Note here that creator is contained within dataset. If you aren’t sure where you want to go, hit the tab button on your keyboard after typing $ and a list of available elements in the structure will appear (e.g., doc$<TAB>):\n\nNote that if you hit tab, and nothing pops up, this most likely implies that you are trying to go into an EML element that can take a series items. For example doc$dataset$creator$<TAB> will not show a pop-up menu. This is because creator is a series-type object (i.e. you can have multiple creators). If you want to go deeper into creator, you first must tell R which creator you are interested in. Do this by writing [[i]] first where i is the index of the creator you are concerned with. For example, if you want to look at the first creator i = 1. Now doc$dataset$creator[[1]]$<TAB> will give you many more options. Note, an empty autocomplete result sometimes means you have reached the end of a branch in the EML structure.\nAt this point stop and take a deep breath. The key takeaway is that EML is a hierarchical tree structure. The best way to get familiar with it is to explore the structure. Try entering doc$dataset into your console, and print it. Now make the search more specific, for instance: doc$dataset$abstract."
  },
  {
    "objectID": "explore_eml.html#understand-the-eml-schema",
    "href": "explore_eml.html#understand-the-eml-schema",
    "title": "Explore EML",
    "section": "Understand the EML schema",
    "text": "Understand the EML schema\nAnother great resource for navigating the EML structure is looking at the schema which defines the structure. The schema diagrams on this page are interactive. Further explanations of the symbology can be found here. The schema is complicated and may take some time to get familiar with before you will be able to fully understand it.\nFor example, let’s take a look at eml-party. To start off, notice that some elements have bolded lines leading to them.\n\nA bold line indicates that the element is required if the element above it (to the left in the schema) is used, otherwise the element is optional.\nNotice also that next to the givenName element it says “0..infinity”. This means that the element is unbounded — a single party can have many given names and there is no limit on how many you can add. However, this text does not appear for the surName element — a party can have only one surname.\nYou will also see icons linking the EML slots together, which indicate the ordering of subsequent slots. These can indicate either a “sequence” or a “choice”. In our example from eml-party, a “choice” icon indicates that either an individualName, organizationName, or positionName is required, but you do not need all three. However, the “sequence” icon tells us that if you use an individualName, you must include the surName as a child element. If you include the optional child elements salutation and givenName, they must be written in the order presented in the schema.\nThe eml schema sections you may find particularly helpful include eml-party, eml-attribute and eml-physical.\nFor a more detailed description of the EML schema, see the reference section on exploring EML."
  },
  {
    "objectID": "pi_correspondence.html",
    "href": "pi_correspondence.html",
    "title": "PI Correspondence",
    "section": "",
    "text": "This section covers new data packages submitted. For other inquiries see the PI FAQ templates\nPlease think critically when using these canned replies rather than just blindly sending them. Typically, content should be adjusted/ customized for each response to be as relevant, complete, and precise as possible.\nIn your first few months, please run email drafts by the #datateam Slack and get approval before sending.\nRemember to consult the submission guidelines for details of what is expected.\nQuick reference:\n\nInitial email template\nFinal email templates\nAdditional email template"
  },
  {
    "objectID": "pi_correspondence.html#pi-faq-email-templates",
    "href": "pi_correspondence.html#pi-faq-email-templates",
    "title": "PI Correspondence",
    "section": "PI FAQ email templates",
    "text": "PI FAQ email templates\n\nData\nQ: I would like to / have already uploaded data to ____ repository\n\nReview the repository, does it issue persistent identifiers (ie. DOIs)?\nDo they say how long they will be commiting to storing the data?\n\nIf the answer is no to either questions, we will need to document and store any files in our own system. If any of this is unclear from what you can find online, you can message Matt to discuss with NSF if a particular repository will be allowed.\nPossible response for a generalist repository\n\nIf your data doesn’t require features that only ____ provides, we would encourage you to consider publishing both the data and the metadata at the Arctic Data Center. Some benefits to submitting to us includes:\n\n\nWe provide a DOI that can be cited in your published papers\nWe track where datasets are being cited\nBy submitting both the data and metadata to us, you can fulfill your NSF reporting requirements at the same time. This will reduce the work needed on your part to get any additional metadata requirements for NSF.\n\nQ: Can I replace data that have already been uploaded and keep the DOI?\n\nA: Once you have published your data with the Arctic Data Center, it can still be updated by providing an additional version which can replace the original, while still preserving the original and making it available to anyone who might have cited it. To update your data, return to the data submission tool used to submit it, and provide an update.\n\n\nAny update to a data package qualifies as a new version and therefore requires a new DOI. This is because each DOI represents a unique, immutable version, just like for a journal article. DOIs and URLs for previous versions of data packages remain active on the Arctic Data Center (will continue to resolve to the data package landing page for the specific version they are associated with), but a clear message will appear at the top of the page stating that “A newer version of this dataset exists” with a hyperlink to the latest version. With this approach, any past uses of a DOI (such as in a publication) will remain functional and will reference the specific version of the data package that was cited, while pointing users to the newest version if one exists.\n\n\nDatateam: please review this dataset again to make sure it follows current standards\n\nQ: Why don’t I see my data package on the ADC?\n\nPossible Answer #1: The data package is still private because we are processing it or awaiting your approval to publish it. Please login with your ORCID iD to view private data packages.\n\n\nPossible Answer #2: The data package is still private and you do not have access because you were not the submitter. If you need access please have the submitter send us a message from his/her email address confirming this, along with your ORCID iD. Once we receive that confirmation we will be happy to grant you permission to view and edit the data package.\n\n\nPossible Answer #3: The data package is still private and we accidentally failed to grant you access. We apologize for the mistake. We have since updated the access policy. Please let us know if you are still having trouble viewing the data package here: [URL]. Remember to login with your ORCID iD.\n\n\nPossible Answer #4: The URL was garbled by their email server (eg. URL Defense or the url was split into two lines). You can navigate to your dataset by going to your name in the top right and selecting my datasets.\n\nIssue: MANY files to upload (100s or 1000s) or large cumulative size.\n\nA: Datateam - Prior to accepting large uploads, take the time to make sure there is enough space available and uploading all the files is necessary. If it is not a NSF dataset see the section on Scope.\n\n\nWe have a secure FTP you can access. Details are available here: https://help.nceas.ucsb.edu/remote_file_access . Please access our server at datateam.nceas.ucsb.edu with the username “visitor”. Let us know if you would like to use our SFTP and we will send you the password and the path to which directory to upload to.\n\n\nIf you have files to transfer to us that total several terabytes it may be best to arrange a shipment of an external hard drive.\n\nQ: Can I add another data file to an existing submission without having to fill out another metadata form?\n\nA: Yes. Navigate to the data package after being sure to login. Then click the green “Edit” button. The form will populate with the already existing metadata so there is no need to fill it out again. Click “Add Files” and browse to the file you wish to add.\n\n\nBe aware that the DOI will change after you add this file (or make any changes to a data package) as, just like for a journal article, a DOI represents a unique and immutable version. The original URL and DOI will remain functional and valid, but clearly display a message at the top of that page stating that “A newer version of this dataset exists” with a link to the latest version. Only the newest version wil be discoverable via a search.\n\n\nWe can also copy the metadata from existing dataset. Please send us the URL of the dataset you would like to copy and the title of the new dataset and we will be able to do that on your behalf.\n\nQ: I want to organize the order of the files/metadata entities\n\nA: We can reorganize entities within their entities. This is a limitation with our tools (EML).\n\n\nWhile re-ordering the groups of entities is possible manually, it isn’t possible the way write_eml and publish_update is written. We do not recommended reordering entities this way.\n\nQ: Can we submit data as an Excel file?\n\nA: While the Arctic Data Center supports the upload of any data file format, sharing data can be greatly enhanced if you use ubiquitous, easy-to-read formats. For instance, while Microsoft Excel files are commonplace, it is better to export these spreadsheets to Comma Separated Values (CSV) text files, which can be read on any computer without needing to have Microsoft products installed. So, yes, you are free to submit an Excel workbook, however we strongly recommend converting each sheet to a CSV. The goal is not only for users to be able to read data files, but to be able to analyze them with software, such as R Studio. Typically, we would extract any plots and include them as separate image files.\n\n[ONLY SAY THIS NEXT PART IF THE REQUESTOR CONTINUES TO INSIST and then USE PROV TO POINT FROM THE XLS TO THE CSVs]\n\nI understand that having the plots in the same file as the data they are built from simplifies organization. If you definitely prefer to have the Excel workbook included, we ask that you allow us to document the data in both formats and include a note in the metadata clarifying that the data are indeed duplicated (but in different formats).\n\nQ: Can we submit model output?\n\nA: Yes you can submit your model output to the Arctic Data Center. We also recommend including model source code directly in the dataset as it is critical to understand the model output dataset and will allow other researchers to re-produce your output. If the model is complex or it’s important to maintain file structure then it can submitted as a zip file. We also recommend included a detailed readme file that documents: version information, licensing information, a list of software/hardware used in development, a list of software/hardware dependencies needed to run the software, information detailing source data for models, any mathematical/physical explanations needed to understand models, any methods used to evaluate models, and instructions how to run the model if not including in the source code as comments.\nPlease read our software submission guidelines for more detailed information: https://arcticdata.io/submit/#metadata-guidelines-for-software\n\n\n\nAccess\nQ: May another person (e.g. my student) submit data using my ORCID iD so that it is linked to me?\n\nA: We recommend instead that the student set up their own ORCiD account at https://ORCiD.org/register and submit data packages from that account. Submissions are processed by our team and, at that point, we can grant you full rights to the metadata and data files even though another person submitted them.\n\nIssue: Web form not cooperating.\n\nA: To help us diagnose the problem, could you let us know the following:\n\n\nWhich operating system (including the version) and browser (with version #) are you using?\nAt which exact step did the issue arise?\nWhat error message did you receive?\nDo you have any reason to believe that you may be using a slow internet connection?\n\n\nPlease provide us with any relevant screenshots and we will troubleshoot from there.\n\nIssue: Can’t log in to the Arctic Data Center\n\nA: Please accept our apologies that you are experiencing difficulty logging in. We suggest trying these troubleshooting steps:\n\n\nTry a different internet browser (Chrome, Firefox, Internet Explorer etc.)\nTry clearing your cache and then re-logging in with orcid Id\nPrivacy blockers (like EFF’s privacy badger https://www.eff.org/privacybadger) block the cookies needed for the login to work. To enable the cookies you need to disable your privacy tracker for arcticdata.io.\n\n\nIf the problem persists please let us know what step the error occured or if there were error messages you have recieved.\n\n\n\nScope\nQ: Can I submit a non-NSF funded dataset?\nSample text 1:\n\nThe Arctic Data Center is open to all arctic-related data. For larger data packages, we would likely need to charge a one-time archival fee which amortizes the long-term costs of preservation in a single payment. Please let us know the size of your dataset in terms of total number and total size of all files. We look forward to receiving your submission!\n\nSample text 2:\n\nYes, you can submit non-NSF-funded Arctic data if you are willing to submit under the licensing terms of the Arctic Data Center (CC-0 or CC-BY), the data are moderately sized (with exact limits open to discussion), and a lot of support time to curate the submission is not required (i.e., you submit a complete metadata record and well formatted, open format data files). For larger data packages, we would likely need to charge a one-time archival fee which amortizes the long-term costs of preservation in a single payment. Also, please note that NSF-funded projects take priority when it comes to processing. Information on best practices for data and metadata organization is available here: https://arcticdata.io/submit/#organizing-your-data.\n\nQ: Is ______ considered within the arctic\n\nWe don’t have a precise geographic cutoff. We definitely will preserve any dataset that is funded by the Arctic section of the National Science Foundation, which includes many sub-Arctic studies. So, as long as the dataset is related to Arctic research defined broadly, we would consider it. We will prioritize NSF-funded projects because that is our main mandate, but we will also preserve non-NSF data about the Arctic as time allows. If you send more details about the study, its subject, location, and funding, we could be more definitive about whether we could archive it."
  },
  {
    "objectID": "pi_correspondence.html#good-examples-of-data-packages",
    "href": "pi_correspondence.html#good-examples-of-data-packages",
    "title": "PI Correspondence",
    "section": "Good Examples of data packages",
    "text": "Good Examples of data packages\nModeling\n\nModel with output:\n\nhttps://doi.org/10.18739/A24J09X55\n\nModel code archived as a zip if preverving directory structure is important\n\nhttps://doi.org/10.18739/A2JS9H795\n\nModel with provenance:\n\nhttps://arcticdata.io/catalog/view/doi%3A10.18739%2FA2WS8HM6C#urn%3Auuid%3Ae6390181-85e9-46a2-b2ba-e352ece51cc6\n\nCode and output:\n\nNote: We can only archive the code if the submitter has the rights to redistribute it (like if they wrote it themselves, or if the code has a license that allows for that)\nhttps://doi.org/10.18739/A2XS5JH4N\n\nGuidelines for large outputs:\n\nhttps://arcticdata.io/submit/#guidelines-for-large-models\n\n\nSpatial data\n\nVector\n\nhttps://doi.org/10.18739/A2TB0XV89\n\nRaster\n\nhttps://doi.org/10.18739/A2GT5FG0B\n\n\nPortals\n\nhttps://arcticdata.io/catalog/portals/DBO\nhttps://arcticdata.io/catalog/portals/CALM"
  },
  {
    "objectID": "pi_correspondence.html#final-checklist",
    "href": "pi_correspondence.html#final-checklist",
    "title": "PI Correspondence",
    "section": "Final Checklist",
    "text": "Final Checklist\nYou can click on the assessment report on the website to for a general check. Fix anything you see there.\nSend the link over slack for peer review by your fellow datateam members. Usually we look for the following (the list is not exhaustive):\n\nSpecial Datasets\nPlease refer to the dedicated pages for instructions to handle these cases:\n\nMOSAiC\nDBO\n\n\n\nSystem Metadata\nThe format ids are correct\n\n\nGeneral EML\nIncluded lines for FAIR:\n\ndoc <- eml_add_publisher(doc)\ndoc <- eml_add_entity_system(doc)\n\n\n\nTitle\n\nNo abbreviations, should include geographic and temporal coverage\n\n\n\nAbstract\n\nlonger than 100 words\nno abbreviations or garbled text\ntags such as <superscript>2</superscript> and <subscript>2</subscript> can be used for nicer formatting\n\n\n\nDataTable / OtherEntity / SpatialVectors\n\nin the correct one: DataTable / OtherEntity / SpatialVector / SpatialRaster for the file type\nentityDescription - longer than 5 words and unique\nphysical present and format correct\n\n\nAttribute Table\n\ncomplete\nattributeDefinitions longer than 3 words\nVariables match what is in the file\nMeasurement domain - if appropirate (ie dateTime correct)\nMissing Value Code - accounted for if applicable\nSemantic Annotation - appropriate semantic annotations added, especially for spatial and temporal variables: lat, lon, date etc.\n\n\n\n\nPeople\n\ncomplete information for each person in each section\n\nincluding ORCID and e-mail address for all contacts\npeople repeated across sections should have consistent information\n\n\n\n\nGeographic region\n\nthe map looks correctand matches the geographic description\ncheck if negatives (-) are missing\n\n\n\nProject\n\nif it is an NSF award you can use the helper function:\n\ndoc$dataset$project <- eml_nsf_to_project(awards)\n\nfor other awards that need to be set manually, see the set project page\n\n\n\nMethods\n\npresent\nno garbled text\n\n\n\nCheck EML Version\n\ncurrently using: eml-2.2.0 (as of July 30 2020)\nreview to see if the EML version is set correctly by reviewing the doc$`@context` that it is indeed 2.2.0 under eml\nRe-run your code again and have the lineemld::eml_version(\"eml-2.2.0\") at the top\nMake sure the system metadata is also 2.2.0\n\n\n\nAccess\n\nGranted access to PI using set_rights_and_access()\n\nmake sure it is http:// (no s)\n\nnote if it is a part of portals there might be specific access requirements for it to be visible using set_access()\n\n\n\nSFTP Files\n\nif there are files transferred to us via SFTP, delete those files when the ticket is resolved\n\n\n\nUpdated datasets\nAll the above applies. These are some areas to do a closer check when users update with a new file:\n\nNew data was added\n\nTemporal Coverage and Title\nand follow usual protocols\n\nFiles were replaced\n\nupdate physical and entityName\ndouble-check attributes are the same\ncheck for any new missing value codes that should be accounted for\n\nWas the dataset published before 2021?\n\nupdate project info , annotations\n\nGlance over entire page for any small mistakes (ie. repeated additionalMetadata, any missed &amps, typos)"
  },
  {
    "objectID": "pi_correspondence.html#initial-review-checklist",
    "href": "pi_correspondence.html#initial-review-checklist",
    "title": "PI Correspondence",
    "section": "Initial review checklist",
    "text": "Initial review checklist\nBefore responding to a new submission use this checklist to review the submission. When your are ready to respond use the initial email template and insert comments and modify as needed.\n\nSensitive Data\nIf any of the below is in the dataset, please alert the #arctica team know before proceeding.\n\nCheck if there is any sensitive information or personal identifying information in the data (eg. Names)\nCan the data be disaggregated and de-anonymized? (eg. a small sample size and individuals could be easily identified by their answers)\nDryad Human Subject data guidelines can be a good place to start\n\nCommon Cases:\n\nSocial Science: Any dataset involving human subjects (may include awards awarded by ASSP and topics such as COVID-19)\nArchaeology: archaeological site location information, which is protected from public access by law\nBiology: protected species location coordinates\n\n\n\nData citations\n\nIf the dataset appears to be in a publication please (might be in the abstract) make sure that those citations are registered.\n\n\n\nTitle\n\nWHAT, WHERE, and WHEN:\n\nIs descriptive of the work (provides enough information to understand the contents at a general scientific level), AND includes temporal coverage\nProvides a location of the work from the local to state or country level\nProvides a time frame of the work\nNO UNDEFINED ACRONYMS, ABBREVIATIONS, nor INITIALISMS unless approved of as being more widely-known in that form than spelled out\n\n\n\n\nAbstract\n\nDescribes the DATA as well as:\n\nThe motivation (purpose) of the study\nWhere and when the research took place\nAt least one sentence summarizing general methodologies\nNO UNDEFINED ACRONYMS, ABBREVIATIONS, nor INITIALISMS unless approved of as being more widely-known in that form than spelled out\nAt least 100 words total\n\ntags such as <superscript>2</superscript> and <subscript>2</subscript> can be used for nicer formatting\n\nAny citations to papers can be registered with us\n\n\n\n\nKeywords\n\nSome keywords are included\n\n\n\nData\n\nData is normalized (if not suggest to convert the data if possible)\nAt least one data file, or an identifier to the files at another approved archive, unless funded by ASSP (Arctic Social Sciences Program)\nNo xls/xlsx files (or other proprietary files)\nFile contents and relationships among files are clear\nEach file is well NAMED and DESCRIBED and clearly differentiated from all others\nAll attributes in EML match attribute names in respective data files EXACTLY, are clearly defined, have appropriate units, and are in the same order as in the file. Quality control all dimensionless units.\nMissing value codes are explained (WHY are the data absent?)\nIf it is a .rar file  -> scan the file\nIf there is the unit tons make sure to ask if it is metric tons or imperical tons if not clarified already\n\n\n\nPeople & Parties\n\nAt least one contact and one creator with a name, email address, and ORCID iD\n\n\n\nCoverages\n\nIncludes coverages that make sense\n\nTemporal coverage - Start date BEFORE end date\nGeologic time scales are added if mentioned in metadata (e.g. 8 Million Years or a name of a time period like Jurassic)\nSpatial coverage matches geographic description (check hemispheres)\nGeographic description is from the local to state or country level, at the least\nTaxonomic coverage if appropriate\n\n\n\n\nProject Information\n\nAt least one FUNDING number\nTitle, personnel, and abstract match information from the AWARD (not from the data package)\n\n\n\nMethods\n\nThis section is REQUIRED for ALL NSF-FUNDED data packages\nEnough detail is provided such that a reasonable scientist could interpret the study and data for reuse without needing to consult the researchers, nor any other resources\n\n\n\nPortals\n\nIf there are multiple submissions from the same people/project let them know about the portals feature\nIf this is part of a portal make sure this dataset can be found there. Additional steps might be needed to get that to work. Please consult Jeanette and see the data portals section."
  },
  {
    "objectID": "pi_correspondence.html#large-file-transfer",
    "href": "pi_correspondence.html#large-file-transfer",
    "title": "PI Correspondence",
    "section": "Large file transfer",
    "text": "Large file transfer\nOften if the researcher has many files to upload or the files are large in size, we will need to provide alternative methods of upload. We currently have two options available for large file transfer where sFTP is easier to set up but slower while GLOBUS takes a bit more setup but faster.\nBefore providing access, try to get a sense of how big the transfer will be. df -h on Arctic server and datateam server - look at current space available\n\nsFTP\nAs a team member for login info.\n\nAfter you login, you can add a folder with your last name to add your files. If you need more detailed access instructions, I have included the link here for your convenience: https://help.nceas.ucsb.edu/NCEAS/help/remote_file_access\n\nOption 1: SSH via the Terminal https://pages.github.nceas.ucsb.edu/NCEAS/help/connecting_to_linux_using_ssh.html\nOption 2: Cyberduck instructions\nTo use Cyberduck to transfer local files onto the Datateam server:\n\nOpen Cyberduck.\nCheck that you have the latest version (Cyberduck -> Check for Update…). If not, download and install the latest (you may need Jeanette to enter a password).\nClick “Open Connection”.\nFrom the drop-down, choose “SFTP (Secure File Transfer Protocol)”.\nEnter “datateam.nceas.ucsb.edu” for Server.\nEnter your username and password.\nConnect.\n\nFrom here, you can drag and drop files to and from the server.\n\n\nGlobus Endpoint\n\narctic-data-center\n#arctic-data-center\nlogin using your credentials on the datateam server\n\nRemember to remove the files on the datateam server after you finish a ticket to free up space."
  },
  {
    "objectID": "pi_correspondence.html#navigate-rt",
    "href": "pi_correspondence.html#navigate-rt",
    "title": "PI Correspondence",
    "section": "Navigate RT",
    "text": "Navigate RT\nThe RT ticketing system is how we communicate with folks interacting with the Arctic Data Center.\nWe use it for managing submissions, accessing issues, etc. It consists of three separate interfaces:\nFront Page\nAll Tickets\nTicket Page\n\nFront page\n\nThis is what you see first\n\nHome - brings you to this homepage\n\nTickets - to search for tickets (also see number 5)\n\nTools - not needed\n\nNew Ticket - create a new ticket\n\nSearch - Type in the ticket number to quickly navigate to a ticket\n\nQueue - Lists all of the tickets currently in a particular queue (such as ‘arcticdata’) and their statuses\n\n\n\nNew = unopened tickets that require attention\n\nOpen = tickets currently open and under investigation and/or being processed by a support team member\n\nStalled = tickets awaiting responses from the PI/ submitter\n\n\n\nTickets I Own - These are the current open tickets that are claimed by me\n\nUnowned Tickets - Newest tickets awaiting claim\n\nTicket Status - Status and how long ago it was created\n\nTake - claim the ticket as yours\n\n\n\nAll tickets\n\nThis is the queue interface from number 6 of the Front page\n1. Ticket number and title\n2. Ticket status\n3. Owner - who has claimed the ticket\n\n\nExample ticket\n\n\nTitle - Include the PI’s name for reference\n\nDisplay - homepage of the ticket\n\nHistory - Comment/Email history, see bottom of Display page\n\nBasics - edit the title, status, and ownership here\n\nPeople - option to add more people to the watch list for a given ticket conversation. Note that user/ PI/ submitter email addresses should be listed as “Requestors”. Requestors are only emailed on “Replys”, not “Comments”. Ensure your ticket has a Requestor before attempting to contact users/ PIs/ submitters\n\nLinks - option to “Merge into” another ticket number if this is part of a larger conversation. Also option to add a reference to another ticket number\n\n\n\n\n\n\n\nWarning\n\n\n\nVerify that this is indeed the two tickets you want to merge. It is non-reversible.\n\n\n\nActions\n\n\n\nReply - message the submitter/ PI/ all watchers\n\nComment - attach internal message (no submitters, only Data Teamers)\n\nOpen It - Open the ticket\n\nStall - submitter has not responded in greater than 1 month\n\nResolve - ticket completed\n\n\n\nHistory - message history and option to reply (to submitter and beyond) or comment (internal message)\n\n\n\nNew data submission\nWhen notified by Arcticbot about a new data submission, here are the typical steps:\n\nUpdate the Requestor under the People section based on the email given in the submission (usually the user/ PI/ submitter). You may have to google for the e-mail address if the PI did not include it in the metadata record.\nTake the ticket (Actions > Take)\nReview the submission based on the checklist\nDraft an email using the template and let others review it via Slack\nSend your reply via Actions"
  },
  {
    "objectID": "pi_correspondence.html#replicate-datasets",
    "href": "pi_correspondence.html#replicate-datasets",
    "title": "PI Correspondence",
    "section": "Replicate Datasets",
    "text": "Replicate Datasets\nSometimes we get requests to have their datasets replicated to ADC. Usually it is a dataset on EDI where you can ge the Digital Object Identifier: which serves as the resource map on DataOne\n\n\n\n\n\n\nNote\n\n\n\nIf a link isn’t given, you can use the package ID (i.e. knb-lter-arc.20129.1) and add it to the end of this link: https://portal.edirepository.org/nis/mapbrowse?packageid=\n\n\nIf we are unsure about the identifer you can try querying for it on the CN:\n\ncn <- CNode('PROD')\n\n#find the DOIs\nresult <- query(cn, list(q = paste0(\"(id:*10.6073/pasta/d4f567844673857239eec0cb61c6f543\",\"* *:* NOT obsoletedBy:*)\"),\n                         fl = \"identifier,rightsHolder,formatId, fileName, dateUploaded, authoritativeMN, replicaMN\",\n                         sort = 'dateUploaded+desc',\n                         start =\"0\",\n                         rows = \"1500\"),\n                as=\"data.frame\")\n\n\nCloning the packages\n\nTry cloning to the test node first to see how it will look. Set up your nodes ::: {.cell}\n\nfrom <- dataone::D1Client(\"PROD\", \"urn:node:LTER\")\nto <- dataone::D1Client(\"STAGING\", \"urn:node:mnTestARCTIC\")\n:::\n\n\n\n\n\n\nNote\n\n\n\nFor LTER datasets on EDI, there are two possibilities for the mn: \"urn:node:LTER\" and \"urn:node:EDI\". Try the other one if one isn’t working\n\n\n\nUse clone_package to copy it over to the test node ::: {.cell}\n\nclone_package(\"doi:10.6073/pasta/d4f567844673857239eec0cb61c6f543\", #example doi to replicate\n              from = from,\n              to = to,\n              add_access_to = \"http://orcid.org/0000-0001-8888-547X\",\n              change_auth_node = F,\n              new_pid = T)\n:::\n\nOnce you have verified that it clones properly to the test node, do the same in production but with a couple of minor modifications: ::: {.cell}\n\nfrom <- dataone::D1Client(\"PROD\", \"urn:node:LTER\")\nto <- dataone::D1Client(\"PROD\", \"urn:node:ARCTIC\")\n\nclone_package(\"doi:10.6073/pasta/0af82d3c3d9d1710775cf9b1464ce70b\",\n              from = from,\n              to = to,\n              add_access_to = \"http://orcid.org/0000-0001-8888-547X\",\n              change_auth_node = F,\n              new_pid = F) #uses the same pid\n:::\n\n\n\n\n\n\nNote\n\n\n\nmake sure the new_pid argument is set to F when you publish to production"
  },
  {
    "objectID": "data_packages_arcticdatautils.html#create-a-resource-map-using-arcticdatautils",
    "href": "data_packages_arcticdatautils.html#create-a-resource-map-using-arcticdatautils",
    "title": "Using arcticdatautils",
    "section": "Create a resource map using arcticdatautils",
    "text": "Create a resource map using arcticdatautils\nIf you are creating a new data package, you must create a resource map. Resource maps provide information about the resources in the data package (i.e. which data files are associated with a particular metadata file (xml)).\nBefore creating a new resource map, it is best to ensure that all the objects of interest have already been published to the node. Therefore, if you’ve only run publish_object() on the xml (in section 2.4 above), you will also need to publish all the data objects you wish to associate with the xml. The resource map you are about to create controls these linkages.\nOnce all the objects that ought to belong to the package have been published, create a resource map using their respective PIDs (or the variables you saved the PIDs to) via the arcticdatautils::create_resource_map() function, like so:\n\nresource_map_pid <- create_resource_map(adc_test,\n                                        metadata_pid = metadata_pid,\n                                        data_pids = data_pids)"
  },
  {
    "objectID": "solr_queries.html#construct-a-query",
    "href": "solr_queries.html#construct-a-query",
    "title": "Solr Queries",
    "section": "Construct a query",
    "text": "Construct a query\nEach Solr query is comprised of a number of parameters. These are like arguments to a function in R, but they are entered as parts of a URL.\nThe most common parameters are:\n\nq: The query. This is like subset() or dplyr::filter() in R.\nfl: What fields are returned for the documents that match your query (q). If not set, all fields are returned.\nrows: The maximum number of documents to return. Solr will truncate your result if the result size is greater than rows.\nsort: Sorts the result by the values in the given Solr field (e.g., sort by date uploaded).\n\nThe query (q) parameter uses a syntax that looks like field:value, where field is one of the Solr fields and value is an expression. The expression can match a specific value exactly, e.g., q=identifier:arctic-data.7747.1 or q=identifier:\"doi:10.5065/D60P0X4S\", which finds the Solr document for a specific Object by PID (identifier).\n\n\n\n\n\n\nNote\n\n\n\nIn the second example, the DOI PID is surrounded in double quotes. This is because Solr has reserved characters, of which : is one, so we have to help Solr by surrounding values with reserved characters in them in quotes or by escaping them.\n\n\nTo view the list of query-able parameters on the Arctic Data Center and their descriptions, you can visit https://arcticdata.io/metacat/d1/mn/v2/query/solr. The list of parameters is also provided below:\n\n\n  [1] \"solr\"                        \"_root_\"                     \n  [3] \"_text_\"                      \"_version_\"                  \n  [5] \"abstract\"                    \"archived\"                   \n  [7] \"attribute\"                   \"attributeDescription\"       \n  [9] \"attributeLabel\"              \"attributeName\"              \n [11] \"attributeUnit\"               \"author\"                     \n [13] \"authorGivenName\"             \"authorGivenNameSort\"        \n [15] \"authoritativeMN\"             \"authorLastName\"             \n [17] \"authorSurName\"               \"authorSurNameSort\"          \n [19] \"awardNumber\"                 \"awardTitle\"                 \n [21] \"beginDate\"                   \"blockedReplicationMN\"       \n [23] \"changePermission\"            \"checksum\"                   \n [25] \"checksumAlgorithm\"           \"class\"                      \n [27] \"collectionQuery\"             \"contactOrganization\"        \n [29] \"contactOrganizationText\"     \"datasource\"                 \n [31] \"dataUrl\"                     \"dateModified\"               \n [33] \"datePublished\"               \"dateUploaded\"               \n [35] \"decade\"                      \"documents\"                  \n [37] \"eastBoundCoord\"              \"edition\"                    \n [39] \"endDate\"                     \"family\"                     \n [41] \"fileID\"                      \"fileName\"                   \n [43] \"formatId\"                    \"formatType\"                 \n [45] \"funderIdentifier\"            \"funderName\"                 \n [47] \"funding\"                     \"fundingText\"                \n [49] \"gcmdKeyword\"                 \"genus\"                      \n [51] \"geoform\"                     \"geohash_1\"                  \n [53] \"geohash_2\"                   \"geohash_3\"                  \n [55] \"geohash_4\"                   \"geohash_5\"                  \n [57] \"geohash_6\"                   \"geohash_7\"                  \n [59] \"geohash_8\"                   \"geohash_9\"                  \n [61] \"hasPart\"                     \"id\"                         \n [63] \"identifier\"                  \"investigator\"               \n [65] \"investigatorText\"            \"isDocumentedBy\"             \n [67] \"isPartOf\"                    \"isPublic\"                   \n [69] \"isService\"                   \"isSpatial\"                  \n [71] \"keyConcept\"                  \"keywords\"                   \n [73] \"keywordsText\"                \"kingdom\"                    \n [75] \"label\"                       \"language\"                   \n [77] \"logo\"                        \"LTERSite\"                   \n [79] \"mediaType\"                   \"mediaTypeProperty\"          \n [81] \"namedLocation\"               \"noBoundingBox\"              \n [83] \"northBoundCoord\"             \"numberReplicas\"             \n [85] \"obsoletedBy\"                 \"obsoletes\"                  \n [87] \"ogcUrl\"                      \"order\"                      \n [89] \"origin\"                      \"originator\"                 \n [91] \"originatorText\"              \"originText\"                 \n [93] \"parameter\"                   \"parameterText\"              \n [95] \"phylum\"                      \"placeKey\"                   \n [97] \"preferredReplicationMN\"      \"presentationCat\"            \n [99] \"project\"                     \"projectText\"                \n[101] \"prov_generated\"              \"prov_generatedByExecution\"  \n[103] \"prov_generatedByProgram\"     \"prov_generatedByUser\"       \n[105] \"prov_hasDerivations\"         \"prov_hasSources\"            \n[107] \"prov_instanceOfClass\"        \"prov_used\"                  \n[109] \"prov_usedByExecution\"        \"prov_usedByProgram\"         \n[111] \"prov_usedByUser\"             \"prov_wasDerivedFrom\"        \n[113] \"prov_wasExecutedByExecution\" \"prov_wasExecutedByUser\"     \n[115] \"prov_wasGeneratedBy\"         \"prov_wasInformedBy\"         \n[117] \"pubDate\"                     \"purpose\"                    \n[119] \"readPermission\"              \"relatedOrganizations\"       \n[121] \"replicaMN\"                   \"replicationAllowed\"         \n[123] \"replicationStatus\"           \"replicaVerifiedDate\"        \n[125] \"resourceMap\"                 \"rightsHolder\"               \n[127] \"scientificName\"              \"sem_annotated_by\"           \n[129] \"sem_annotates\"               \"sem_annotation\"             \n[131] \"sem_comment\"                 \"sensor\"                     \n[133] \"sensorText\"                  \"seriesId\"                   \n[135] \"serviceCoupling\"             \"serviceDescription\"         \n[137] \"serviceEndpoint\"             \"serviceInput\"               \n[139] \"serviceOutput\"               \"serviceTitle\"               \n[141] \"serviceType\"                 \"site\"                       \n[143] \"siteText\"                    \"size\"                       \n[145] \"sku\"                         \"source\"                     \n[147] \"sourceText\"                  \"southBoundCoord\"            \n[149] \"species\"                     \"submitter\"                  \n[151] \"term\"                        \"termText\"                   \n[153] \"text\"                        \"title\"                      \n[155] \"titlestr\"                    \"topic\"                      \n[157] \"topicText\"                   \"updateDate\"                 \n[159] \"webUrl\"                      \"westBoundCoord\"             \n[161] \"writePermission\""
  },
  {
    "objectID": "misc_file_types.html",
    "href": "misc_file_types.html",
    "title": "Miscellaneous file types",
    "section": "",
    "text": "This uses the workflow in here: https://readxl.tidyverse.org/articles/articles/readxl-workflows.html\nThis is preferred to converting Excel files by hand to avoid human error.\n\n\n\n\n\n\nNote\n\n\n\nIf files are in the visitor folder you might need to be complete the following while logged into visitor\n\n\nLoad the necessary packages ::: {.cell}\nlibrary(magrittr)\nlibrary(readxl)\nlibrary(readr)\n:::\nGet a list of files that we want to convert ::: {.cell}\nxlsx <- dir(\"directory/of/files/here\", pattern = \"*xls\", recursive = T, full.names = T)\n:::\nCreate a function that iterates through the excel files and saves it as a csv in the same folder the excel file was in ::: {.cell}\nread_then_csv <- function(sheet, path) {\n  #remove the file extension\n  pathbase <- path %>%\n    tools::file_path_sans_ext()\n  \n  #change file extension to csv and save with the sheet name\n  for(i in 1:length(sheet)){\n    path %>%\n      read_excel(sheet = i) %>%\n      write_csv(paste0(pathbase, \"_\", sheet[i], \".csv\")) \n  }\n  \n}\n:::\nGet the sheet name(s) ::: {.cell}\nsheets <- xlsx %>%\n  map(excel_sheets) %>%\n  set_names()\n:::\nIterate over all the xlsx files for each of the sheets ::: {.cell}\ndf <- map2(sheets, xlsx, ~read_then_csv(.x, path = .y))\n:::\nCheck the files afterwards to make sure everything was converted properly ::: {.cell}\ncsv <- dir(\"directory/of/files/here\", pattern = \"*csv\", recursive = T, full.names = T)\n:::\nCheck to see if there are any empty tables and get a list of files that were empty ::: {.cell}\nfiles <- map(csv, read_csv)\nn <- which(map(files, nrow) == 0)\n:::\nRemove those empty table files ::: {.cell}\nlapply(csv[n], file.remove)\n:::\nRemove xlsx files if everything looks in order ::: {.cell}\nlapply(xlsx, file.remove)\n:::"
  },
  {
    "objectID": "misc_file_types.html#datalogger-files",
    "href": "misc_file_types.html#datalogger-files",
    "title": "Miscellaneous file types",
    "section": "Datalogger files",
    "text": "Datalogger files\n.hobo files are raw data files offloaded from a sensor, and can include real-time graphs of measured variables, such as temperature and soil moisture conditions.\n.hobo files can be opened using HOBOware, which can be downloaded from here."
  },
  {
    "objectID": "misc_file_types.html#netcdfs",
    "href": "misc_file_types.html#netcdfs",
    "title": "Miscellaneous file types",
    "section": "NetCDFs",
    "text": "NetCDFs\nThis section is for dealing with NetCDF (.nc) files. These files require data tables but since they can not be simply opened on the computer using a text editor or Excel, you can use Panoply to explore them or the R commands. However, notice that not all NetCDF files have the attribute table information.\n\nlibrary(ncdf4)\n# gets attribute info\natts <- arcticdatautils::get_ncdf4_attributes('filepath')\n# preview of View(atts)\natts[1:10,]\n\n\nThe “long_name” can be used to build a definition.\nThe “units” can be used for either units or the enumerated domain codes.\nThe “_FillValue” is a missing value code it looks like.\n\n# returns the actual values for a specified attribute\nt <- ncdf4::nc_open(filepath)\ntest <- ncdf4::ncvar_get(t, 'attributeName')\n# preview of View(test)\ntest[1:10]\n\n\nThe formatId in the sysmeta will most likely be netCDF-4, but could be netCDF-3."
  },
  {
    "objectID": "misc_file_types.html#reorganize-files-on-the-server",
    "href": "misc_file_types.html#reorganize-files-on-the-server",
    "title": "Miscellaneous file types",
    "section": "Reorganize files on the server",
    "text": "Reorganize files on the server\nUseful commands to use when reorganizing large datasets to be prepped to be uploaded using datapack\n\n\n\n\n\n\nNote\n\n\n\nThis is run in the terminal\n\n\n\nBasics\nMoving around ::: {.cell}\ncd directory_name\n:::\nGo up one directory using .. ::: {.cell}\ncd ..\n:::\nGet the contents of the current directory ::: {.cell}\nls\n:::\nGet the directory structure for this folder\n\n-d flag shows only the directories ::: {.cell}\n\ntree\n\ntree -d\n:::\n\n\nRename file based on file path\nFor example you have some files organized like this:\n../../visitor/Lastname\n└── RU_ALN_TR1_FL007R\n│   └── rgb_images\n|       └──image.png\n└── RU_ALN_TR1_FL008B \n    └── micasense_preflight_calibration_images\n        └──image.png\nWe want to rename the files.\n\nFind all the files with the same file name ::: {.cell}\n\nfind . -name 'image.png' \n:::\n\nFirst extract the file name in parts ((.*)/(.*)/(.*)/(.*)) by using the. / as a separator.\n\n\nEach part is represented by $#. If you want the last part of the file name:$4. Rearrange this section as needed:$2/$3/$2-$3-$4\nSet the flag as -n while testing to see the result of the renaming first before committing to it using -v ::: {.cell}\n\nrename -n -- 's|(.*)/(.*)/(.*)/(.*)$|$2/$3/$2-$3-$4|'\n\nrename -v -- 's|(.*)/(.*)/(.*)/(.*)$|$2/$3/$2-$3-$4|'\n:::\n\nPutting it together by taking the results from find and renaming those files\n\n\n| the pipe is like the %>% in R ::: {.cell}\n\nfind . -name 'image.png' | rename -v -- 's|(.*)/(.*)/(.*)/(.*)$|$2/$3/$2-$3-$4|'\n:::\n\n\nUnzip files\n\nunzip '*zip'\n\n\n\nZip shapefiles\n\nFor all the files in a directory, create a folder and move those files ::: {.cell}\n\nfor file in *; do dir=$(echo $file | cut -d. -f1); mkdir -p $dir; mv $file $dir; done\n:::\n\nZip the folders ::: {.cell}\n\nfor file in *;do zip -r $file $file; done\n:::\n\nRemove the directories after zipping\n\n-r means to recursively remove files ::: {.cell}\nrm -r */\n:::"
  },
  {
    "objectID": "misc_file_types.html#scan-rar-files",
    "href": "misc_file_types.html#scan-rar-files",
    "title": "Miscellaneous file types",
    "section": "Scan rar files",
    "text": "Scan rar files\nThis section is for rar files which support data compression and file scanning. Here is how to scan rar files:\n\nDownload the rar file to datateam\nIn the terminal run the following on your files:\n\n\nmkdir to-scan && mv <file.rar> to-scan && cd to-scan\nunrar e <file.rar>\n\nThat should scan the compressed file and each individual file it contains:\n\nclamscan *\n\nClean up by deleting the to-scan folder - ’rm -r to-scan`."
  },
  {
    "objectID": "misc_file_types.html#spatial-data",
    "href": "misc_file_types.html#spatial-data",
    "title": "Miscellaneous file types",
    "section": "Spatial data",
    "text": "Spatial data\nShapefiles and their associated files can be kept in a single grouping using *.zip (or another similar format). To extract metadata, simply run:\n\nlibrary(sf)\n\npid <- \"pid of a zipped shapefile on the ADC\"\n\nspatial_obj <- arcticdatautils::read_zip_shapefile(adc, pid)\n\nst_geometry(spatial_obj)\n\nThis will return the shapefile as an sf style data.frame so that you can examine the attributes, and print the projection and geometry information. Note that the column geometry should not be considered an attribute for documentation purposes. This information is represented in the spatialVector$geometry element."
  }
]