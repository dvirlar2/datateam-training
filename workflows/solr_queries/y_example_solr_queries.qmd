## Example Solr queries

For additional examples and explanations, check out the Apache Lucene <a href = 'https://lucene.apache.org/core/2_9_4/queryparsersyntax.html' target='_blank'>Query Parser Syntax</a> page.

```{r echo = FALSE, warning = FALSE, message = FALSE, eval = FALSE}
# This code chunk was here (with no eval=F argument) before I edited becuase it was used in the code chunk in the "query for files uploaded during a specific time" section. I don't like that it shows the output, so I'll leave this code here, set eval=F, and set eval=F for the related code chunk as well. That way it still shows how to query, but doens't include all the output taking up space. 

library(magrittr)

cn <- CNode('PROD')
adc <- getMNode(cn,'urn:node:ARCTIC')

format_query_result <- function(query_result) {
  query_result %>% 
    knitr::kable(format = "html") %>% 
    kableExtra::kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>% 
    kableExtra::scroll_box(width = "100%",
                           height = "400px") #display concisely
}
```

### Find everything

```{r, eval = FALSE}
result <- query(adc, list(q="*:*",
                               fl="*",
                               rows="20"),
                as = "data.frame")
```

### Query a wildcard expression 

```{r eval = FALSE}
#find any id that starts with arctic-data.6
result <- query(adc, list(q="id:arctic-data.6*",
                               rows="5000"),
                as = "data.frame")
```

### Query multiple fields 
Multiple fields can be queried at once by using either the `AND` or `OR` arguments. 
```{r eval = FALSE}
result <- query(adc, list(q="title:soil*+AND+origin:Ludwig",
                               rows="5000"),
                as = "data.frame")
```

```{r eval = FALSE}
result <- query(adc, list(q="title:soil* OR origin:Ludwig",
                               rows="5000"),
                as = "data.frame")
```

:::{.callout-note}
You can use either spaces or `+` to separate query parameters. When typing queries in R, it's often easier to read if you use spaces. However, when using the browser, you may want to use `+` to keep the query clean. (The browser will replace spaces with `%20`.)
::: 
 
### Query by formatType
Objects are queryable via their `formatType` which is one of DATA, METADATA, or RESOURCE. 

```{r, eval = FALSE}
result <- query(adc, list(q = 'formatType:RESOURCE AND submitter:"http://orcid.org/0000-0002-2561-5840"',
                          fl = 'identifier,submitter,fileName',
                          sort = 'dateUploaded+desc',
                          rows='10'),
                as = "data.frame")
```

```{r, eval = FALSE}
result <- query(adc, list(q = 'formatType:METADATA AND title:*Toolik*',
                          fl = 'identifier,submitter,fileName',
                          sort = 'dateUploaded+desc',
                          rows='10'),
                as = "data.frame")
``` 

### Query pids by a specific submitter

```{r, eval = FALSE}
result <- query(adc, list(q = 'submitter:"http://orcid.org/0000-0003-4703-1974"',
               fl = 'identifier,submitter,fileName, size',
               sort = 'dateUploaded+desc',
               rows='1000'),
      as = "data.frame")
```

### Query pids with special characters 

```{r, eval = FALSE}
# Wrap the pid with special characters with escaped backslashes
dataone::query(adc, list(q = paste0('id:', '\"', 'doi:10.18739/A20R9M36V', '\"'),
                         fl = 'dateUploaded AND identifier',
                         rows = 5000),
               as = "data.frame")
```

### Query multiple conditions within one field

```{r eval = FALSE}
result <- query(adc, list(q="title:(soil* AND carbo*)",
                               rows="5000"),
                as = "data.frame") 
```

### Query for latest versions only

```{r eval = FALSE}
result <- query(adc, list(q = "rightsHolder:*orcid.org/0000-000X-XXXX-XXXX* AND (*:* NOT obsoletedBy:*)",
                          fl = "identifier,rightsHolder,formatId",
                          start ="0",
                          rows = "1500"),
                     as="data.frame")
```

### Use NOT in a query

Just add `-` before a query parameter!

```{r eval = FALSE}
result <- query(adc, list(q="title:(soil AND -carbon)",
                               rows="5000"),
                as = "data.frame")
```

### Query a coordinating node

```{r eval = FALSE}
result <- query(cn, list(q="title:soil* AND origin:Ludwig",
                              rows="5000"),
                as = "data.frame")
```

### Query for EMLs that document a specific data pid 

```{r, eval = FALSE}
# Wrap the pid in escaped quotation marks if it contains special characters 
query(adc, list(q = paste0('documents:', '\"', 'urn:uuid:f551460b-ce36-4dd3-aaa6-3a6c6e338ec9', '\"'),
                fl = "identifier",
                rows="20"),
      as = "data.frame")

# Alternatively we can use a wildcard expression in place of "urn:uuid:"
# This way we don't need to escape the colon special characters 
query(adc, list(q = paste0("documents:*f551460b-ce36-4dd3-aaa6-3a6c6e338ec9"),
                fl = "identifier",
                rows="20"),
      as = "data.frame")
```

### Query for files uploaded during a specific time
```{r, eval = FALSE}
query(adc, list(q="dateUploaded:[2020-05-06T00:00:00Z TO NOW]",
                fl="title,identifier,resourceMap,dateUploaded,dateModified",
                sort = "dateUploaded+desc",
                rows="200"), 
      as = "data.frame")
```

### Use facets

All resource maps with > 100 data objects that are _not_ on the Arctic Data Center:

```{r, eval = FALSE}
https://cn.dataone.org/cn/v2/query/solr/?q=resourceMap:*+AND+-datasource:*ARCTIC*&rows=0&facet=true&facet.field=resourceMap&facet.mincount=100
```
