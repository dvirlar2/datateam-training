{
  "hash": "2022b75513a93c6545f57e5d138497a7",
  "result": {
    "markdown": "---\ntitle: \"Beyond your first ticket\"\nfreeze: true\n---\n\n\nThis section is meant to be read after you have processed a couple of tickets and you are comfortable with the workflow with a relatively simple dataset with 1-2 files and want to expand your skills and workflows further.\n\n## Working with large data packages\n\n## Add physicals to submissions\n\nNew submissions made through the web editor will not have any `physical` sections within the `otherEntity`s. Add them to the EML with the following script:\n    \n::: {.cell}\n\n```{.r .cell-code}\nfor (i in seq_along(doc$dataset$otherEntity)) {\n    otherEntity <- doc$dataset$otherEntity[[i]]\n    id <- otherEntity$id\n    \n    if (!grepl(\"urn-uuid-\", id)) {\n        warning(\"otherEntity \", i, \" is not a pid\")\n        \n    } else {\n        id <- gsub(\"urn-uuid-\", \"urn:uuid:\", id)\n        physical <- arcticdatautils::pid_to_eml_physical(mn, id)\n        doc$dataset$otherEntity[[i]]$physical <- physical\n    }\n}\n```\n:::\n\nAs you can see from code above, we use a for loop here to add `physical` sections. The for loop is a very useful tool to iterate over a list of elements. With for loop, you can repeat a specific block of code without copying and pasting the code over and over again. When processing datasets in Arctic Data Center, there are many places where for loop can be used, such as publishing a bunch of objects with pids, updating formatID for pkg$data, adding `physical` section like above code, etc.\n\nA loop is composed of two parts: the sequence and the body. The sequence usually generates indices to locate elements and the body contains the code that you want to iterate for each element. \n\nHere is an example of adding the same `attributeList` for all the `dataTable`s in the metadata using for loop. \n::: {.cell}\n\n```{.r .cell-code}\nattributes <- read.csv('attributes.csv')  # attribute table in csv format\nattributeList <- EML::set_attributes(attributes = attributes)\n\nfor (i in 1:length(doc$dataset$dataTable)) { # sequence part\n    doc$dataset$dataTable[[i]]$attributeList <- attributeList # body part\n}\n```\n:::\n\n## Use references\n\nReferences are a way to avoid repeating the same information multiple times in the same EML record. There are a few benefits to doing this, including:\n    \n-   Making it clear that two things are the same (e.g., the creator is the same person as the contact, two entities have the exact same attributes)\n-   Reducing the size on disk of EML records with highly redundant information\n-   Faster read/write/validate with the R EML package\n\nYou may want to use EML references if you have the following scenarios (not exhaustive):\n    \n-   One person has multiple roles in the dataset (creator, contact, etc)\n-   One or more entities shares all or some attributes\n\n### Example with parties\n\n:::{.callout-note}\nDo not use references for creators as it is used for the citation information. The creators will not show up on the top of the dataset if it is a reference. Until this issue is resolved  in NCEAS/metacat#926 we will need to keep this in account.\n:::\n\nIt's very common to see the contact and creator referring to the same person with XML like this:\n    \n```\n<eml packageId=\"my_test_doc\" system=\"my_system\" xsi:schemaLocation=\"eml://ecoinformatics.org/eml-2.1.1 eml.xsd\">\n  <dataset>\n    <creator>\n      <individualName>\n        <givenName>Bryce</givenName>\n        <surName>Mecum</surName>\n      </individualName>\n    </creator>\n    <contact>\n      <individualName>\n        <givenName>Bryce</givenName>\n        <surName>Mecum</surName>\n      </individualName>\n    </contact>\n  </dataset>\n</eml>\n```\n\nSo you see those two times Bryce Mecum is referenced there? If you mean to state that Bryce Mecum is the creator and contact for the dataset, this is a good start. But with just a name, there's some ambiguity as to whether the creator and contact are truly the same person. Using references, we can remove all doubt.\n\n::: {.cell}\n\n```{.r .cell-code}\ndoc$dataset$creator[[1]]$id  <- \"reference_id\"\ndoc$dataset$contact <- list(references = \"reference_id\") \nprint(doc)\n```\n:::\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<eml:eml xmlns:eml=\"eml://ecoinformatics.org/eml-2.1.1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:stmml=\"http://www.xml-cml.org/schema/stmml-1.1\" packageId=\"id\" system=\"system\" xsi:schemaLocation=\"eml://ecoinformatics.org/eml-2.1.1/ eml.xsd\">\n  <dataset>\n    <title>A Minimal Valid EML Dataset</title>\n    <creator id=\"reference_id\">\n      <individualName>\n        <givenName>Bryce</givenName>\n        <surName>Mecum</surName>\n      </individualName>\n    </creator>\n    <contact>\n      <references>reference_id</references>\n    </contact>\n  </dataset>\n</eml:eml>\n```\n\n\n:::{.callout-note}\nThe reference `id` needs to be unique within the EML record but doesn't need to have meaning outside of that.\n:::\n\n### Example with attributes\n\nTo use references with attributes:\n\n1. Add an attribute list to a data table\n2. Add a reference id for that attribute list\n3. Use references to add that information into the `attributeList`s of the other data tables\n\nFor example, if all the data tables in our data package have the same attributes, we can set the attribute list for the first one, and use references for the rest:\n\n::: {.cell}\n\n```{.r .cell-code}\ndoc$dataset$dataTable[[1]]$attributeList <- attribute_list\ndoc$dataset$dataTable[[1]]$attributeList$id <- \"shared_attributes\" # use any unique name for your id\n\nfor (i in 2:length(doc$dataset$dataTable)) {\n  doc$dataset$dataTable[[i]]$attributeList <- list(references = \"shared_attributes\") # use the id you set above\n}\n```\n:::\n\n\n\n## Annotations\n\nIf there are multiple tables with similar annotations you can try something like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#go through each dataTable\nfor(i in 1:length(doc$dataset$dataTable)){\n  \n  #get all the attibute names\n  an <- eml_get_simple(doc$dataset$dataTable[[i]], \"attributeName\")\n  \n  #go through the attributes figure out what will match\n  for(a in 1:length(an)){\n    annotation <- dplyr::case_when(\n      # the attributeName to match ~ valueLabel\n      an[[a]] == \"Sample ID\" ~ \"Identity\",\n      an[[a]] == \"Location\" ~ \"study location name\",\n      an[[a]] == \"Latitude\" ~ \"latitude coordinate\",\n      an[[a]] == \"Longitude\" ~ \"longitude coordinate\",\n      an[[a]] == \"Elevation (m)\" ~ \"elevation\",\n      str_detect(an[[a]], \"Depth|depth\") ~ \"Depth\")\n    \n    #only run this code when the annotations match\n    if(!is.na(annotation)){\n      #based on the entity Name create a unique id\n      entity <- str_split(doc$dataset$dataTable[[i]]$entityName, \"_\")\n      doc$dataset$dataTable[[i]]$attributeList$attribute[[a]]$id <- paste0(entity[[1]][[1]], \"_\", an[[a]])\n      \n      #add the annotation\n      doc$dataset$dataTable[[i]]$attributeList$attribute[[a]]$annotation <- eml_ecso_annotation(annotation)\n    }\n  }\n  \n}\n```\n:::\n\n\n## Streamlining your workflow\n\n## Code Snippets\n\nCode snippets help with templating portions of code that you will be using regularly. To add your own, go to the toolbar ribbon at the top of your Rstudio screen and select:\n\n```\nTools > Global Options... > Code > Edit Snippets > Add these chunks to the end of the file\n```\n\nMore info can be found in this blog post by Mara Averick on how to add them: https://maraaverick.rbind.io/2017/09/custom-snippets-in-rstudio-faster-tweet-chunks-for-all/\n\nUsual `arcticdatautils` ticket workflow\n::: {.cell}\n\n```{.r .cell-code}\nsnippet ticket\n\tlibrary(dataone)\n\tlibrary(arcticdatautils)\n\tlibrary(EML)\n\t\n\tcn <- CNode('PROD')\n\tadc <- getMNode(cn, 'urn:node:ARCTIC')\n\t\n\trm <- \"add your rm\"\n\tpkg <- get_package(adc, rm)\n\tdoc <- EML::read_eml(getObject(adc, pkg\\$metadata))\n\t\n\tdoc <- eml_add_publisher(doc)\n\tdoc <- eml_add_entity_system(doc)\n\t\n\teml_validate(doc)\n\teml_path <- \"eml.xml\"\t\n\twrite_eml(doc, eml_path)\n\n\t#update <- publish_update(adc,\n\t#\t\t\t\t\t\t\t\t\t\t\t\tmetadata_pid = pkg\\$metadata,\n\t#\t\t\t\t\t\t\t\t\t\t\t\tresource_map_pid = pkg\\$resource_map,\n\t#\t\t\t\t\t\t\t\t\t\t\t\tmetadata_path = eml_path,\n\t#\t\t\t\t\t\t\t\t\t\t\t\tdata_pids = pkg\\$data,\n\t#\t\t\t\t\t\t\t\t\t\t\t\tpublic = F)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t#datamgmt::categorize_dataset(update\\$metadata, c(\"theme1\"), \"Your Name\")\n```\n:::\n\nThe `datapack` ticket workflow\n::: {.cell}\n\n```{.r .cell-code}\nsnippet datapack\n\tlibrary(dataone)\n\tlibrary(datapack)\n\tlibrary(digest)\n\tlibrary(uuid)\n\tlibrary(dataone)\n\tlibrary(arcticdatautils)\n\tlibrary(EML)\n\t\n\td1c <- D1Client(\"PROD\", \"urn:node:ARCTIC\")\n\tpackageId <- \"id here\"\n\tdp <- getDataPackage(d1c, identifier=packageId, lazyLoad=TRUE, quiet=FALSE)\n\t\n\t#get metadata id\n\tmetadataId <- selectMember(dp, name=\"sysmeta@formatId\", value=\"https://eml.ecoinformatics.org/eml-2.2.0\")\n\t\n\t#edit the metadata\n\tdoc <- read_eml(getObject(d1c@mn, metadataId))\n\t\n\t#add the publisher info\n\tdoc <- eml_add_publisher(doc)\n\tdoc <- eml_add_entity_system(doc)\n\t\n\tdoc\\$dataset\\$project <- eml_nsf_to_project(\"nsf id here\")\n\t\n\t#check and save the metadata\n\teml_validate(doc)\n\teml_path <- arcticdatautils::title_to_file_name(doc\\$dataset\\$title)\n\twrite_eml(doc, eml_path)\n\t\n\tdp <- replaceMember(dp, metadataId, replacement=eml_path)\n\t\n\t#upload the dataset\n\tmyAccessRules <- data.frame(subject=\"CN=arctic-data-admins,DC=dataone,DC=org\", permission=\"changePermission\") \n\tpackageId <- uploadDataPackage(d1c, dp, public=F, accessRules=myAccessRules, quiet=FALSE)\n\t#datamgmt::categorize_dataset(\"doi\", c(\"theme1\"), \"Jasmine\")\n```\n:::\n\nQuick way to give access to submitters to their datasets:\n::: {.cell}\n\n```{.r .cell-code}\nsnippet access\n\tlibrary(dataone)\n\tlibrary(arcticdatautils)\n\tlibrary(EML)\n\n\tcn <- CNode('PROD')\n\tadc <- getMNode(cn, 'urn:node:ARCTIC')\n\n\trm <- \"rm here\"\n\tpkg <- get_package(adc, rm)\n\n\tset_access(adc, unlist(pkg), \"orcid here\")\n```\n:::\n\nQuick access to the usual code for common Solr queries:\n::: {.cell}\n\n```{.r .cell-code}\nsnippet solr\n\tlibrary(dataone)\n\tlibrary(arcticdatautils)\n\tlibrary(EML)\n\n\tcn <- CNode('PROD')\n\tadc <- getMNode(cn, 'urn:node:ARCTIC')\n\t\n\tresult <- query(adc, list(q = \"rightsHolder:*orcid.org/0000-000X-XXXX-XXXX* AND (*:* NOT obsoletedBy:*)\",\n\t                          fl = \"identifier,rightsHolder,formatId, fileName, dateUploaded\",\n\t                          sort = 'dateUploaded+desc',\n\t                          start =\"0\",\n\t                          rows = \"1500\"),\n\t                     as=\"data.frame\")\n```\n:::\n\n\n\n## Resources for R\n\n### Learning\n\nThe following online books are useful for expanding your R knowledge and skills:\n\n- <a href=\"http://training.arcticdata.io/\" target=\"_blank\">the most recent ADC training materials</a>\n    + The cleaning and data manipulation section is useful for working with attribute tables\n- <a href=\"https://csgillespie.github.io/efficientR/\" target=\"_blank\">Efficient R Programming</a>\n    + In particular Chapter 3 Efficient Programming\n- <a href=\"https://r4ds.had.co.nz/\" target=\"_blank\">R for Data Science</a>\n    + Section on Strings\n- <a href=\"http://r-pkgs.had.co.nz/\" target=\"_blank\">R Packages</a>\n    + contributing to `arcticdatatutils`, `datamgmt` and `EML`\n- <a href=\"http://adv-r.had.co.nz/\" target=\"_blank\">Advanced R</a>\n    + Object-oriented programming in R for S4 to understand how `datapack` and `dataone` packages are written\n- <a href=\"https://bookdown.org/yihui/bookdown/\" target=\"_blank\">bookdown: Authoring Books and Technical Documents with R Markdown</a>\n + formatting, troubleshooting and updating the training document\n \n**Others**\n\n- <a href=\"https://rstudio-education.github.io/hopr/\" target=\"_blank\">Hands-On Programming with R</a>\n- <a href=\"https://bookdown.org/rdpeng/rprogdatascience/\" target=\"_blank\">R Programming for Data Science</a>\n- <a href=\"https://bookdown.org/rdpeng/exdata/\" target=\"_blank\">Exploratory Data Analysis with R</a>\n- <a href=\"https://bookdown.org/rdpeng/RProgDA/\" target=\"_blank\">Mastering Software Development in R</a>\n- <a href=\"https://geocompr.robinlovelace.net/\" target=\"_blank\">Geocomputation with R</a>\n- <a href=\"https://bookdown.org/yihui/rmarkdown/\" target=\"_blank\">R Markdown: The Definitive Guide</a>\n- <a href=\"https://style.tidyverse.org/\" target=\"_blank\">The Tidyverse Style Guide</a>\n\nThe RStudio <a href=\"https://www.rstudio.com/resources/cheatsheets/\" target=\"_blank\">cheatsheets</a> are also useful references for functions in <a href=\"https://www.tidyverse.org/\" target=\"_blank\">tidyverse</a> and other packages.\n\n\n### Packages\n\nThe data team uses and develops a number of R packages. Here is a listing and description of the main packages:\n\n- dataone\n    - reading and writing data at DataONE member nodes\n    - <a href=\"http://doi.org/10.5063/F1M61H5X\" target=\"_blank\">http://doi.org/10.5063/F1M61H5X</a>\n- datapack\n    - creating and managing data packages\n    - <a href=\"https://github.com/ropensci/datapack\" target=\"_blank\">https://github.com/ropensci/datapack</a>\n- EML\n    - creating and editing EML metadata documents\n    - <a href=\"https://ropensci.github.io/EML\" target=\"_blank\">https://ropensci.github.io/EML</a>\n- arcticdatautils\n    - utility functions for processing data for the Arctic Data Center\n    - <a href=\"https://nceas.github.io/arcticdatautils/\" target=\"_blank\">https://nceas.github.io/arcticdatautils/</a>\n- datamgmt\n    - data management utilities for curating, documenting, and publishing data (sandbox package)\n    - <a href=\"https://nceas.github.io/datamgmt/\" target=\"_blank\">https://nceas.github.io/datamgmt/</a>\n- metadig\n    - authoring MetaDIG quality checks\n    - <a href=\"https://github.com/NCEAS/metadig-r\" target=\"_blank\">https://github.com/NCEAS/metadig-r</a>\n- metajam\n    - downloading and reading data and metadata from DataONE member nodes\n    - <a href=\"https://nceas.github.io/metajam/\" target=\"_blank\">https://nceas.github.io/metajam/</a>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}