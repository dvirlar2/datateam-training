{
  "hash": "8febc7c03305b92b99d17952e70c62c7",
  "result": {
    "markdown": "---\ntitle: \"Exploring EML\"\noutput-dir: docs\nfreeze: true\n---\n\n\n\nWe use the Ecological Metadata Language (EML) to store structured metadata for all datasets submitted to the Arctic Data Center. EML is written in XML (extensible markup language) and functions for building and editing EML are in the <a href = 'https://github.com/ropensci/EML' target='_blank'>EML R package</a>.\n\nCurrently the Arctic Data Center website supports editing EML version 2.2.0. There are still some metadata in 2.1.1 that will be converted eventually. \n\nFor additional background on EML and principles for metadata creation, check out <a href = 'data/eml-principles.pdf' target='_blank'>this paper</a>.\n\nIf you aren't too familiar with lists and how to navigate them yet take a look at the relevant sections in the <a href = 'https://stat545.com/r-objects.html#lists-hold-just-about-anything' target='_blank'>Stat 545 class.</a> \n\n## Navigate through EML\n\nThe first task when editing an EML file is navigating the EML file. An EML file is organized in a structure that contains many lists nested within other lists. The function `View` allows you to get a crude view of an EML file in the viewer. It can be useful for exploring the file.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Need to be in this member node to explore file\nd1c_test <- dataone::D1Client(\"STAGING\", \"urn:node:mnTestARCTIC\")\n\ndoc <- read_eml(getObject(d1c_test@mn, \n                          \"urn:uuid:558eabf1-1e91-4881-8ba3-ef8684d8f6a1\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nView(doc)\n```\n:::\n\n\n![](../../images/eml_view.png) \n\nThe complex EML document is represented in R as as series of named, nested lists. We use lists all the time in R! A `data.frame` is one example of a special kind of list that we use all the time. You may be familiar with the syntax `dataframe$column_name` which allows us to select a particular column of a `data.frame`. Under the hood, a `data.frame` is a named list of vectors with the same length. You select one of those vectors using the `$` operator, which is called the \"list selector operator.\" \n\nJust like you navigate in a `data.frame`, you can use the `$` operator to navigate through the EML structure. The `$` operator allows you to go deeper into the EML structure and to see what elements are nested within other elements. However, you have to tell R where you want to go in the structure when you use the `$` symbol. For example, if you want to view the dataset element of your EML you would use the command ```doc$dataset```. If you want to view the creators of your data set you would use ```doc$dataset$creator```. Note here that `creator` is contained within `dataset`. If you aren't sure where you want to go, hit the tab button on your keyboard after typing `$` and a list of available elements in the structure will appear (e.g., `doc$<TAB>`):\n\n![](../../images/rstudio_autocomplete.png) \n\nNote that if you hit tab, and nothing pops up, this most likely implies that you are trying to go into an EML element that can take a series items. For example ```doc$dataset$creator$<TAB>``` will not show a pop-up menu. This is because `creator` is a series-type object (i.e. you can have multiple `creator`s). If you want to go deeper into `creator`, you first must tell R which `creator` you are interested in. Do this by writing `[[i]]` first where `i` is the index of the `creator` you are concerned with. For example, if you want to look at the first `creator` i = 1. Now ```doc$dataset$creator[[1]]$<TAB>``` will give you many more options. Note, an empty autocomplete result sometimes means you have reached the end of a branch in the EML structure.\n\nAt this point stop and take a deep breath.  The key takeaway is that EML is a hierarchical tree structure.  The best way to get familiar with it is to explore the structure.  Try entering `doc$dataset` into your console, and print it. Now make the search more specific, for instance: `doc$dataset$abstract`.  \n\n## Understand the EML schema\n\nAnother great resource for navigating the EML structure is looking at the <a href = 'https://eml.ecoinformatics.org/schema/' target='_blank'>schema</a> which defines the structure. The schema diagrams on this page are interactive. Further explanations of the symbology can be found <a href = 'https://www.oxygenxml.com/doc/versions/22.0/ug-editor/topics/relax-ng-schema-diagram-symbols.html?hl=symbols' target='_blank'>here</a>. The schema is complicated and may take some time to get familiar with before you will be able to fully understand it.\n\nFor example, let's take a look at <a href = 'https://eml.ecoinformatics.org/images/eml-party.png' target='_blank'>eml-party</a>. To start off, notice that some elements have bolded lines leading to them.\n\n![](../../images/eml-party.png)  \n\nA bold line indicates that the element is _required_ if the element above it (to the left in the schema) is used, otherwise the element is _optional_.\n\nNotice also that next to the `givenName` element it says \"0..infinity\". This means that the element is unbounded &mdash; a single party can have many given names and there is no limit on how many you can add. However, this text does not appear for the `surName` element &mdash; a party can have only one surname.\n\nYou will also see icons linking the EML slots together, which indicate the ordering of subsequent slots. These can indicate either a \"sequence\" or a \"choice\". In our example from `eml-party`, a \"choice\" icon indicates that either an `individualName`, `organizationName`, or `positionName` is required, but you do not need all three. However, the \"sequence\" icon tells us that if you use an `individualName`, you must include the `surName` as a child element. If you include the optional child elements `salutation` and `givenName`, they must be written in the order presented in the schema.\n\nThe eml schema sections you may find particularly helpful include <a href = 'https://eml.ecoinformatics.org/images/eml-party.png' target='_blank'>eml-party</a>, <a href = 'https://eml.ecoinformatics.org/images/eml-attribute.png' target='_blank'>eml-attribute</a> and <a href = 'https://eml.ecoinformatics.org/images/eml-physical.png' target='_blank'>eml-physical</a>.\n\nFor a more detailed description of the EML schema, see the <a href = 'https://nceas.github.io/datateam-training/reference/explore-eml.html' target='_blank'>reference section on exploring EML</a>.\n\n## Access specific elements\n\nThe `eml_get()` function is a powerful tool for exploring EML (more on that <a href = 'https://ropensci.github.io/EML/' target='_blank'>here</a> ). It takes any chunk of EML and returns _all instances_ of the element you specify. _Note:_ you'll have to specify the element of interest exactly, according to the spelling/capitalization conventions used in EML. Here are some examples:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndoc <- read_eml(system.file(\"example-eml.xml\", package = \"arcticdatautils\"))\neml_get(doc, \"creator\")\n```\n:::\n\n```\nindividualName:\n  givenName: Bryce\n  surName: Mecum\norganizationName: National Center for Ecological Analysis and Synthesis\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\neml_get(doc, \"boundingCoordinates\")\n```\n:::\n\n```\neastBoundingCoordinate: '-134'\nnorthBoundingCoordinate: '59'\nsouthBoundingCoordinate: '57'\nwestBoundingCoordinate: '-135'\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\neml_get(doc, \"url\")\n```\n:::\n\n```\n'':\n  function: download\n  url: ecogrid://knb/urn:uuid:89bec5d0-26db-48ac-ae54-e1b4c999c456\n'': ecogrid://knb/urn:uuid:89bec5d0-26db-48ac-ae54-e1b4c999c456\n```\n\n`eml_get_simple()` is a simplified alternative to `eml_get()` that produces a list of the desired EML element.\n\n\n::: {.cell}\n\n```{.r .cell-code}\neml_get_simple(doc$dataset$otherEntity, \"entityName\")\n```\n:::\n\n\nTo find an eml element you can use either a combination of `which_in_eml`from the `arcticdatautils` package or `eml_get_simple` and `which` to find the index in an EML list. Use which ever workflow you see \nfit.\n\n**An example question you may have:** *Which creators have a surName \"Mecum\"?*\n\nExample using `which_in_eml`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- which_in_eml(doc$dataset$creator, \"surName\", \"Mecum\")\n# Answer: doc$dataset$creator[[n]]\n```\n:::\n\n\nExample using `eml_get_simple` and `which`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nent_names <- eml_get_simple(doc$dataset$creator, \"surName\")\ni <- which(ent_names == \"Mecum\")\n# Answer: doc$dataset$creator[[i]]\n```\n:::\n",
    "supporting": [
      "03_exploring_eml_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}