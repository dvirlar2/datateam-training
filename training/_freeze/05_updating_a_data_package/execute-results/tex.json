{
  "hash": "9229a543487063662bce4473b0ac7069",
  "result": {
    "markdown": "---\ntitle: \"Updating a data package\"\nfreeze: true\n---\n\n\n\nThis chapter will teach you how to edit and update an existing data package in R. Earlier, we updated metadata. In this section we will learn how to update a data file, and how to update a package by adding an additional data file.\n\n## Update a data object\n\nTo update a data file associated with a data package, you need to do three things:\n\n1)  update the object itself, \n2)  update the resource map (which affiliates the object with the metadata), and\n3)  update the metadata that describes that object\n\nThe `datapack::replaceMember` function takes care of the first two of these tasks. First you need to get the pid of the file you want to replace by using `datapack::selectMember`: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmetadataId <- selectMember(dp, name=\"sysmeta@formatId\", value=\"https://eml.ecoinformatics.org/eml-2.2.0\")\n```\n:::\n\n\nThen use `replaceMember`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndp <- replaceMember(dp, metadataId, replacement=file_path)\n```\n:::\n\n\n\nIf you want to remove some files from the data package we can use `datapack::removeMember`. If we wanted to remove all the zip files associated with this data package, we can use `datapack::removeMember`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nzipId <- selectMember(dp, name=\"sysmeta@formatId\", value=\"application/vnd.shp+zip\")\nremoveMember(dp, zipId, removeRelationships = T)\n```\n:::\n\n\n\n:::{.callout-note}\nYou will need to be explicit about your `format_id` here based on the file type. A list of format IDs can be found <a href = 'https://cn.dataone.org/cn/v2/formats' target='_blank'>here</a> on the DataONE website.\nUse line 2 (Id:) exactly, character for character.\n:::\n\n\nTo accomplish the second task, you will need to update the metadata using the EML package. This is covered in <a href = 'https://nceas.github.io/datateam-training/training/editing-eml.html' target='_blank'>Chapter 4</a>. After you update a file, you will always need to update the metadata because parts of the `physical` section (such as the file size, checksum) will be different, and it may also require different attribute information.\n\nOnce you have updated your metadata and saved it, you can update the package itself.\n\n## Update a package with a new data object\n\nOnce you have updated the data objects and saved the metadata to a file, we can update the metadata and use `replaceMember` to update the package with the new metadata.\n\nMake sure you have the package you want to update loaded into R using `dataone::getDataPackage()`.\n\n### Publish update\n\nNow we can update your data package to include the new data object. Assuming you have updated your data package earlier something like the below: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nd1c_test <- dataone::D1Client(\"STAGING\", \"urn:node:mnTestARCTIC\")\npackageId <- \"the resource map\"\n\ndp <- getDataPackage(d1c_test, identifier=packageId, lazyLoad=TRUE, quiet=FALSE)\nmetadataId <- selectMember(dp, name=\"sysmeta@formatId\", value=\"https://eml.ecoinformatics.org/eml-2.2.0\")\n\n#some modification to the EML here\n\neml_path <- \"path/to/your/saved/eml.xml\"\nwrite_eml(doc, eml_path)\n\ndp <- replaceMember(dp, metadataId, replacement=eml_path)\n```\n:::\n\n\nYou can then upload your data package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyAccessRules <- data.frame(subject=\"CN=arctic-data-admins,DC=dataone,DC=org\", permission=\"changePermission\") \npackageId <- uploadDataPackage(d1c_test, dp, public=FALSE, accessRules=myAccessRules, quiet=FALSE)\n```\n:::\n\n\nIf a package is ready to be public, you can change the `public` argument in the `datapack::uploadDataPackage()` call to `TRUE`.\n\nIf you want to publish with a DOI (Digital Object Identifier) instead of a UUID (Universally Unique Identifier), you need to do this when replacing the metadata. **This should only be done after the package is finalized and has been thoroughly reviewed!**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndoi <- dataone::generateIdentifier(d1c_test@mn, \"DOI\")\ndp <- replaceMember(dp, metadataId, replacement=eml_path, newId=doi)\n\nnewPackageId <- uploadDataPackage(d1c_test, dp, public=TRUE, quiet=FALSE)\n```\n:::\n\n\nIf there is a pre-issued DOI (researcher requested the DOI for the publication first), please do the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndp <- replaceMember(dp, metadataId, replacement=eml_path, newId=\"your pre-issued doi previously generated\")\n\nnewPackageId <- uploadDataPackage(d1c_test, dp, public=TRUE, quiet=FALSE)\n```\n:::\n\n\nIf the package has children, see how to do this using `arcticdatautils::publish_update` in the nesting section of the reference manual.\n\nRefresh the landing page at test.arcticdata.io/#view/... for this package and then follow the \"newer version\" link to view the latest.\n\n\n\n\n## Exercise 4 {.exercise}\n\nWhat if the researcher notices that some information needed to be updated in the data file? We can use `replaceMember` to do just that!\n\nIf you haven't already:\n\n* Locate the data package you published in the [previous exercise](#exercise-3b) by navigating to the URL test.arcticdata.io/#view/...\n* Load the package and EML into R using the [above commands](#publish-update).\n\nMake a slightly different data file to upload to `test.arcticdata.io` for this exercise:\n\n* Load the data file associated with the package into R as a `data.frame`. (Hint: use `read.csv()` to upload the data file from your computer/the server.)\n* Make an edit to the data in R (e.g. change one of the colnames to `\"TEST\"`).\n* Save the edited data. (Hint: use `write.csv(data, row.names = FALSE)`.)\n\nUpload the new csv file, get a new pid and publish those updates:\n\n* Update the data file in the package with the edited data file using `replaceMember`.\n* Update your package using `uploadDataPackage`.\n",
    "supporting": [
      "05_updating_a_data_package_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}