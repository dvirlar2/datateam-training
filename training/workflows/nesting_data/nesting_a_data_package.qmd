## Nesting a data package

```{r, setup, include=FALSE}
knitr::opts_chunk$set(collapse = TRUE)
```

Data packages on member nodes can exist as independent packages or in groups (nested data packages). Much like we can group multiple data files together with a common metadata file, we can group related data packages together with a common "parent" data package.

The structure of nested data packages resembles a pyramid. There is one top level, or "parent", with one or more data packages, or "child packages", nested beneath it. There is no limit to how many nested levels can be created, but packages do not generally exceed 3 levels. <a href = 'https://arcticdata.io/catalog/#view/urn:uuid:b0eef8b3-5f8a-4799-b823-eebcbee047e3' target='_blank'>This "grandparent"</a> has 5 child packages (nested datasets), all of which have child packages of their own.   

Here are some common uses for nesting:  

* collected data vary by year
* an NSF award funds several related projects 
* data collection is still ongoing 
* data files exceed the 1000 file limit per data package

## Add children to an existing parent

A new package is published with a DOI and needs to be nested underneath a pre-existing parent. 
Nest the new child using the `child_pids` argument in `publish_update()`. 

```{r, eval = FALSE}
resource_map_child_new <- "some_child_resource_map_pid"
pkg_parent <- get_package(mn, 'resource_map_parent')

publish_update(mn,
               resource_map_pid = pkg_parent$resource_map,
               metadata_pid = pkg_parent$metadata,
               data_pids = pkg_parent$data_pids,  # parents usually don't contain data, but better to be safe
               child_pids = c(pkg_parent$child_packages, 
                              resource_map_child_new))
# include the resource map PIDs of ALL the childs* in the `child_pids` argument, otherwise the nesting relationships between any omitted childs and the parent will be deleted
```

:::{.callout-warning}
Check through all arguments carefully before you publish to production! Do you need to update the metadata? Does the parent include data objects? Does the parent have a parent? 

Parents can be tricky to fix and work with (especially if they have serial identifiers (SIDs)), so if you're not sure how something works, try it on a test node.
:::

## Create a new parent package

In some cases, a parent package already exists. Search the ADC for the NSF award number to see if there are already exisiting packages. Parents usually have a `UUID` rather than a `DOI` and often start with a title like "Collaborative research:", but not always. More typically, you will need to create a new parent by editing the existing metadata. The parent package should contain a generalized summary for the metadata of each of its childs. 

To create a new parent, you will need to:

1. **Create parent metadata.** It's often easiest to start with a child's metadata and generalize them.
    - *Abstract/title:* Remove dates and other details that are specific to the child package. Sometimes the <a href = 'https://www.nsf.gov/awardsearch/' target='_blank'>NSF award</a> abstract/ title will work.
    - *Data tables/other entities:* Generally, top-level parents do not include data objects, so these sections can be removed.
    - *Geographic coverage:* Expand to include geographic coverage of all childs, if needed.
    - *Temporal coverage:* Expand to include temporal ranges of all childs, if needed. If the study is ongoing, include the most recent end date; the parent can be updated when additional childs are added.
    - *Methods:* Often not needed, but may be included if all childs use the same methods.
2. **Publish the parent metadata to the member node** (ADC) using `publish_object()`.
3. **Create a resource map** to link the parent and childs together using `create_resource_map()` and the `child_pids` argument.

:::{.callout-warning}
Make sure you use the childs' *resource map* `PID`s when you create the resource map! If you forgot to do so, consult Jeanette for help fixing it.
:::

## Example

We can start by creating two data packages on the test node to nest beneath a parent. These data packages contain measurements taken from Lake E1 in Alaska in 2013 and 2014.  

First, load the Arctic Data Center Test Node and libraries.
  
```{r, eval = FALSE}
library(dataone)
library(arcticdatautils)
library(EML)

cn_staging <- CNode('STAGING')
adc_test <- getMNode(cn_staging,'urn:node:mnTestARCTIC')

cn <- CNode('PROD')
adc <- getMNode(cn, 'urn:node:ARCTIC')
```

We will re-create the following parent package: https://arcticdata.io/catalog/#view/urn:uuid:799b7a86-cb1c-497c-a05a-d73492915cad on the test node with two of its children. First we will copy two of the children to the test node, make sure your token for the test node is not expired.

```{r, eval = FALSE}
from <- dataone::D1Client("PROD", "urn:node:ARCTIC")
to <- dataone::D1Client("STAGING", "urn:node:mnTestARCTIC")

child_pkg_1 <- datamgmt::clone_package('resource_map_doi:10.18739/A2KS1R',
                                       from = from, to = to,
                                       add_access_to = arcticdatautils:::get_token_subject(),
                                       change_auth_node = TRUE, new_pid = TRUE)

child_pkg_2 <- datamgmt::clone_package('resource_map_doi:10.18739/A2QK29',
                                       from = from, to = to,
                                       add_access_to = arcticdatautils:::get_token_subject(),
                                       change_auth_node = TRUE, new_pid = TRUE)
```

These two packages correspond to data from the same study, varying only by year; however, they currently exist on the test node as independent entities. We will associate them with each other by nesting them underneath a parent. 

Now, let's create a parent metadata file. Read in one of the childs' metadata files (EML). We can download object from a node in binary format using `dataone::getObject()`.  Once it's downloaded we just need to convert to it to the proper format: in this case to EML format using `EML::read_eml()`. 
  
```{r, eval = FALSE, include = FALSE}
doc_parent <- read_eml("../../training/data/E1_2013metadata.xml")
```

```{r, eval = FALSE, strip.white = TRUE}
doc_parent <- read_eml(getObject(adc_test, child_pkg_1$metadata))
```

```{r, eval = FALSE, strip.white = FALSE}
## View the title 
doc_parent$dataset$title
```

The title of this child contains "2012-2013". This is too specific for the parent, as the temporal range of both childs is 2012-2014. The parent should encompass this larger time range. 
  
```{r, eval = FALSE}
doc_parent$dataset$title <- 'Time series of water temperature, specific conductance, and oxygen from Lake E1, North Slope, Alaska, 2012-2014'
```
  
Like the title, the temporal coverage elements in this EML need to be adjusted. 

```{r, eval = FALSE}
new_end_date <- "2014-09-20"
doc_parent$dataset$coverage$temporalCoverage$rangeOfDates$endDate$calendarDate <- new_end_date
```

Remove `dataTable`s and `otherEntity`s from the metadata. If you recall from previous chapters, `dataTable`s contain metadata associated with data files (generally CSVs) and `otherEntity`s contain metadata about any other files in the data package (for instance a README or coding script). Because the parent does not contain any data objects, we want to remove `dataTable`s and `otherEntity`s from the metdata file. In this instance, the E1 2013 metadata only contain `dataTable`s. We can remove these by setting the `dataTable` element in the EML to a new blank object.
  
```{r, eval = FALSE}
doc_parent$dataset$dataTable <- NULL
```

In this case, the `abstract`, `contact`s, `creator`s, `geographicDescription`, and `methods` are already generalized and do not require changes. 
  
Before writing your parent EML make sure that it validates. This is just a check to make sure everything is in the correct format.  
  
```{r, eval = FALSE}
eml_validate(doc_parent)
```
  
After your EML validates we need to save, or "write", it as a new file. Write your parent EML to a directory in your home folder. You can view this process like using "Save as" in Microsoft Word. We opened a file ("E1_2013.xml"), made some changes, and "saved it as" a new file called "doc_parent.xml".  
  
```{r, eval = FALSE}
# We can save the eml in a temporary file 
eml_path <- file.path(tempdir(), 'science_metadata.xml')
write_eml(doc_parent, path)
```
  
Next, we will publish the parent metadata to the test node.  
  
```{r, eval = FALSE}
metadata_parent <- publish_object(adc_test, 
                                  path = eml_path, 
                                  format_id = format_eml())
```

Finally, we create a resource map for the parent package. We nest the two child data packages using the `child_pids` argument in `create_resource_map()`.  Note that these `child_pids` are `PID`s for the resource maps of the child packages, NOT the metadata `PID`s.
  
```{r, eval = FALSE}
resource_map_parent <- create_resource_map(adc_test, 
                                           metadata_pid = metadata_parent,
                                           child_pids = c(child_pkg_1$resource_map,
                                                          child_pkg_2$resource_map))
```
  
The child packages are now nested underneath the parent.
